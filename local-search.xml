<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2025/08/28/Git+Hexo+Github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2025/08/28/Git+Hexo+Github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="1-需要使用的技术"><a href="#1-需要使用的技术" class="headerlink" title="1. 需要使用的技术"></a>1. 需要使用的技术</h1><h2 id="1-1-Git"><a href="#1-1-Git" class="headerlink" title="1.1 Git"></a>1.1 Git</h2><p>简单来说就是一个分布式的版本控制系统，它可以帮你记录每一次文件的改动，并且可以让同事协同编辑。我们可以方便快捷的查看历史版本。</p><h2 id="1-2-Github"><a href="#1-2-Github" class="headerlink" title="1.2 Github"></a>1.2 Github</h2><p>Github是软件项目的托管平台。</p><h2 id="1-2-Hexo"><a href="#1-2-Hexo" class="headerlink" title="1.2 Hexo"></a>1.2 Hexo</h2><p>它是基于node.js的静态博客网站生成器，作者是来自台湾的Tommy Chen，它可以简单快速的帮我们生成博客页面，并快捷的部署到Gitee或Github上。</p><h1 id="2-环境搭建"><a href="#2-环境搭建" class="headerlink" title="2. 环境搭建"></a>2. 环境搭建</h1><blockquote><p>注意：电脑系统是Mac，M4芯片，本文都是基于该系统。</p></blockquote><h2 id="2-1-检测电脑上是否有相应的环境"><a href="#2-1-检测电脑上是否有相应的环境" class="headerlink" title="2.1 检测电脑上是否有相应的环境"></a>2.1 检测电脑上是否有相应的环境</h2><p>（1）检查Git、node、npm</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">git --version<br>node -v<br>npm -v<br>hexo -v<br></code></pre></td></tr></table></figure><p>（2）查看安装目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">which</span> git<br><span class="hljs-built_in">which</span> node<br><span class="hljs-built_in">which</span> npm<br><span class="hljs-built_in">which</span> hexo<br></code></pre></td></tr></table></figure><h2 id="2-2-环境下载地址"><a href="#2-2-环境下载地址" class="headerlink" title="2.2 环境下载地址"></a>2.2 环境下载地址</h2><p>（1）Git下载地址：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>t-scm.com<span class="hljs-regexp">/download/</span><br></code></pre></td></tr></table></figure><p>（2）node.js与npm下载地址：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>nodejs.cn<span class="hljs-regexp">/download/</span><br></code></pre></td></tr></table></figure><h2 id="2-3-Hexo的安装"><a href="#2-3-Hexo的安装" class="headerlink" title="2.3 Hexo的安装"></a>2.3 Hexo的安装</h2><p>（1）使用npm命令安装Hexo的默认地址为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/usr/local/lib/node_modules<br></code></pre></td></tr></table></figure><ul><li>该地址的安全机制默认是<strong>没有写入权限</strong>的。</li></ul><p>（2）获取系统目录的所有权，在终端中运行以下命令，将 <code>/usr/local</code> 目录及其所有子目录的所有权更改给当前用户：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chown</span> -R $(<span class="hljs-built_in">whoami</span>) /usr/local<br></code></pre></td></tr></table></figure><ul><li><code>sudo</code>: 以超级管理员身份执行。</li><li><code>chown -R</code>: 递归地更改文件所有权。</li><li><code>$(whoami)</code>: 自动获取当前的用户名。</li></ul><p>（3）安装Hexo：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><ul><li><code>-g</code>：全局（global） 的标志。这意味着不是把包安装到当前目录下的 <code>node_modules </code>文件夹里，而是安装到系统的一个全局位置。这样安装的命令行工具可以在电脑的任何地方通过终端直接运行。</li></ul><p>（4）检查安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 检查版本</span><br>hexo -v<br><span class="hljs-comment"># 安装目录</span><br><span class="hljs-built_in">which</span> hexo<br></code></pre></td></tr></table></figure><h1 id="3-博客搭建"><a href="#3-博客搭建" class="headerlink" title="3. 博客搭建"></a>3. 博客搭建</h1><h2 id="3-1-初始化配置"><a href="#3-1-初始化配置" class="headerlink" title="3.1 初始化配置"></a>3.1 初始化配置</h2><p>（1）解决通过 HTTP&#x2F;HTTPS 协议克隆或推送大型 Git 仓库时可能出现的网络超时或失败问题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global http.postBuffer 524288000<br></code></pre></td></tr></table></figure><ul><li><code>git config</code>：Git 的配置命令，用于获取或设置 Git 的配置项。</li><li><code>--global</code>：作用域选项。表示这个配置是针对当前系统用户全局的，而不是针对某个特定的 Git 仓库。设置后会应用到该用户所有的 Git 操作上。</li><li><code>http.postBuffer</code>：要设置的配置项名称。这是这个命令的核心。</li><li><code>524288000</code>：给 http.postBuffer 配置项设置的值。单位是字节（<code>524288000B = 500M</code>）。</li></ul><h2 id="3-2-初始化博客"><a href="#3-2-初始化博客" class="headerlink" title="3.2 初始化博客"></a>3.2 初始化博客</h2><p>（1）初始化博客：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 将当前文件夹初始化为博客文件夹</span><br>hexo init<br><span class="hljs-comment"># 在当前目录下创建一个文件夹名为myblog，并将该文件夹初始化为博客文件夹</span><br>hexo init myblog<br></code></pre></td></tr></table></figure><p>（2）安装依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入博客文件夹</span><br><span class="hljs-built_in">cd</span> myblog<br><span class="hljs-comment"># 安装依赖</span><br>npm install<br></code></pre></td></tr></table></figure><p>（3）本地预览：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 启动服务，浏览器访问 http://localhost:4000 查看本地博客</span><br>hexo server<br></code></pre></td></tr></table></figure><h2 id="3-3-获取SSH"><a href="#3-3-获取SSH" class="headerlink" title="3.3 获取SSH"></a>3.3 获取SSH</h2><p>（1）Github 准备：在 Github 上创建一个<strong>公开仓库</strong>，仓库名格式推荐为 <code>用户名.github.io</code>（这样后期访问路径会更简洁，也不需要过多的额外配置）。</p><p>（2）本地配置 git 的登录用户，需要在 <code>myblog</code> 文件夹下</p><ul><li>登录邮箱：github 上的登录邮箱</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.email <span class="hljs-string">&quot;github登录邮箱&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;123456789@qq.com&quot;</span><br></code></pre></td></tr></table></figure><ul><li>登录用户名：github 上的用户名</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;xxx&quot;</span><br></code></pre></td></tr></table></figure><p>（3）生成 SSH 密钥对，它是安全连接到 GitHub（或其他 Git 服务器）的基石。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 执行此命令后，会等待输入，不用管，直接回车，直到该命令执行结束</span><br>ssh-keygen -t rsa -C <span class="hljs-string">&quot;github登录邮箱&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>等待输入内容说明：</p><p><strong><code>Enter file in which to save the key (/Users/you/.ssh/id_rsa):</code></strong></p><ul><li><strong>意思</strong>：询问你把生成的密钥文件保存在哪里。</li><li><strong>操作</strong>：<strong>直接按回车</strong>接受默认位置（<code>/Users/你的用户名/.ssh/id_rsa</code>）即可。这是 SSH 客户端默认会去寻找密钥的地方。</li></ul><p><strong><code>Enter passphrase (empty for no passphrase):</code></strong></p><ul><li><strong>意思</strong>：询问你是否为私钥设置一个“密码短语”。这是一个额外的安全层。以后每次使用这个密钥时，都需要输入这个密码来解锁它。</li><li><strong>操作</strong>：<ul><li><strong>为了更安全</strong>：输入一个复杂的密码并牢记它。</li><li><strong>为了方便（推荐用于个人电脑）</strong>：<strong>直接按回车</strong>留空，这样使用密钥时就不需要再输入密码。</li></ul></li></ul><p>之后，命令就会生成密钥对，你会看到艺术图案和提示。</p></blockquote><p>（4）密钥对：上诉这个命令会生成两个文件，它们总是成对出现：</p><ul><li><code>id_rsa</code> ：私钥 (Private Key)，绝不能给别人！ 就保存在电脑的 ~&#x2F;.ssh&#x2F; 目录下，好好保管。</li><li><code>id_rsa.pub</code>：公钥 (Public Key)，可以放心地交给任何人。要把它上传到 GitHub、GitLab 等服务器。</li></ul><h2 id="3-4-上传-SSH-到-GitHub"><a href="#3-4-上传-SSH-到-GitHub" class="headerlink" title="3.4 上传 SSH 到 GitHub"></a>3.4 上传 SSH 到 GitHub</h2><p>（1）登录Github</p><p>（2）打开SSH</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">点击github头像 -&gt; Settings -&gt; SSH and GPG keys -&gt; New SSH key<br></code></pre></td></tr></table></figure><p>（3）将<code>id_rsa.pub</code>里面的内容全部复制到 <code>key</code> 文本框中</p><p>（4）在终端测试ssh是否配置成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 输入后，按提示输入yes，执行后看到用户名表示成功，-T表示这次连接不是为了登录，只是测试能否连接和认证</span><br>ssh -T git@github.com<br></code></pre></td></tr></table></figure><h2 id="3-5-配置博客项目上传路径"><a href="#3-5-配置博客项目上传路径" class="headerlink" title="3.5 配置博客项目上传路径"></a>3.5 配置博客项目上传路径</h2><p>（1）在 GitHub 上的博客仓库中获取 <code>SSH</code> 连接路径</p><p><img src="/Users/xycmacmini/Documents/myblog/source/_posts/images/image-20250828163248453-6374727.png" alt="image-20250828163248453"></p><p>（2）在myblog博客项目配置文件 <code>_config.yml</code> 中添加SSH地址</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">&#x27;git&#x27;</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:Xie-YingCheng/Xie-YingCheng.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><blockquote><p><code>type: &#39;git&#39;</code> 是 hexo 3.0 之后的写法，hexo 3.0 之前的写法是：<code>type: &#39;github&#39;</code> 。</p><p><code>branch: master</code> 分支是 master，在 GitHub 的仓库 → Settings → Pages → Branch 也要改为 master。</p></blockquote><p><img src="/Users/xycmacmini/Documents/markdown/blog/images/image-20250828165835633.png" alt="image-20250828165835633"></p><h2 id="3-6-上传博客"><a href="#3-6-上传博客" class="headerlink" title="3.6 上传博客"></a>3.6 上传博客</h2><p>（1）安装Hexo的上传部署插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save hexo-deployer-git<br></code></pre></td></tr></table></figure><p>（2）上传博客</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 清除之前生成的一些静态资源，注意是claen，不是clear</span><br>hexo clean<br><span class="hljs-comment"># 重新生成</span><br>hexo g<br><span class="hljs-comment"># 上传、部署博客</span><br>hexo d<br></code></pre></td></tr></table></figure><h1 id="4-博客页面美化"><a href="#4-博客页面美化" class="headerlink" title="4. 博客页面美化"></a>4. 博客页面美化</h1><p>下载使用Fuild主题：（下载压缩包）</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/fluid-dev/</span>hexo-theme-fluid<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
