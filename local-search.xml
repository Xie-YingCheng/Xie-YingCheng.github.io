<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>MySQL基础</title>
    <link href="/2025/09/09/MySQL%E5%9F%BA%E7%A1%80/"/>
    <url>/2025/09/09/MySQL%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="1-基础知识"><a href="#1-基础知识" class="headerlink" title="1. 基础知识"></a>1. 基础知识</h1><h2 id="1-1-基础知识"><a href="#1-1-基础知识" class="headerlink" title="1.1 基础知识"></a>1.1 基础知识</h2><p>（1）MySQL的安装：略，参考Docker安装。</p><p>（2）完全限定的表名与列名：在不同表中存在名字相同的列名、在不同的库中存在名字相同的表名，此时，可以使用完全限定的表名和列名。</p><div class="code-wrapper"><pre><code class="hljs sql">库名.表名 ;  <span class="hljs-comment">-- 完全限定的表名</span>表名.列名 ;  <span class="hljs-comment">-- 完全限定的列名</span></code></pre></div><h2 id="1-2-MySQL注释"><a href="#1-2-MySQL注释" class="headerlink" title="1.2 MySQL注释"></a>1.2 MySQL注释</h2><p>（1）单行注释：SQL标准</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- 注释内容（SQL标准）</span></code></pre></div><p>（2）单行注释：MySQL支持，大部分不支持</p><div class="code-wrapper"><pre><code class="hljs sql"># 注释内容（MySQL支持，大部分不支持）</code></pre></div><p>（3）多行注释：SQL标准</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">/*</span><span class="hljs-comment"> * 多行注释（SQL标准）</span><span class="hljs-comment"> */</span></code></pre></div><h2 id="1-3-引号与反引号"><a href="#1-3-引号与反引号" class="headerlink" title="1.3 引号与反引号"></a>1.3 引号与反引号</h2><p>（1）MySQL的<strong>字段名</strong>、<strong>表名</strong>通常不需要加任何引号，如果非要加上引号，推荐加反引号（着重号）；</p><p>（2）MySQL的列别名可以不加引号，如果加引号，单引号和双引号以及反引号都可以；</p><p>（3）MySQL的<strong>表别名不可以加引号</strong>；</p><p>（4）单引号和双引号都可以表示字符串(字符串一定不能使用反引号，不支持)。</p><p>（5）反引号的使用：查询的字段名是关键字或者存在空格等。</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> `<span class="hljs-keyword">from</span>` <span class="hljs-keyword">FROM</span> employees ;</code></pre></div><h2 id="1-4-MySQL命令"><a href="#1-4-MySQL命令" class="headerlink" title="1.4 MySQL命令"></a>1.4 MySQL命令</h2><p>（1）结尾：MySQL命令以<code>;</code>结尾。</p><p>（2）大小写：MySQL关键字不区分大小写。大小写习惯：</p><ul><li><p>SQL关键字习惯大写；</p></li><li><p>列、表名使用小写。</p></li></ul><blockquote><p>本文约定：伪代码关键字使用小写（方便英文拼写），例子关键字大写，其余小写。</p></blockquote><p>（3）空格：处理SQL语句时，所有的空格都会被忽略，变为一个空格。</p><p>（4）行：SQL语句可以在一行，可以在多行，在多行更易读和调试，但是尽量不要在一条语句中出现空行。</p><h2 id="1-5-一些基础命令"><a href="#1-5-一些基础命令" class="headerlink" title="1.5 一些基础命令"></a>1.5 一些基础命令</h2><p>（1）选择数据库：刚连接到MySQL时，没有任何数据库打开供使用，所以需要先选择一个数据库。</p><div class="code-wrapper"><pre><code class="hljs sql">use 库名 ; <span class="hljs-comment">-- 没有返回结果，使用SQLyog的时候，会看到已经切换到该数据库下</span>USE test_sql ;</code></pre></div><p>（2）显示当前用户的所有数据库：</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> DATABASES ; <span class="hljs-comment">-- 返回当前用户下一个可用数据库的列表</span></code></pre></div><p>（3）显示当前数据库下所有的表：</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> TABLES ; <span class="hljs-comment">-- 返回当前数据库内可使用的表的列表</span></code></pre></div><p>（4）查看当前库下某个表的表结构：</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">desc</span> 表名 ; <span class="hljs-comment">-- 查看表结构，方式1</span><span class="hljs-keyword">show</span> columns <span class="hljs-keyword">from</span> 表名 ; <span class="hljs-comment">-- 查看表结构，方式2</span><span class="hljs-keyword">show</span> index <span class="hljs-keyword">from</span> 表名 ;  <span class="hljs-comment">-- 查看表的索引（主键约束、外键约束、唯一约束）</span></code></pre></div><p>（5）查看当前使用的是哪个数据库：</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> DATABASE() ;</code></pre></div><p>（6）查看MySQL的版本：</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> VERSION() ;</code></pre></div><p>（7）查看创建数据库时使用的语句：</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">create</span> database 数据库 ;<span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">CREATE</span> DATABASE test_sql ;</code></pre></div><p>（8）查看创建表时使用的语句：</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">create table</span> 表名 ;<span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">CREATE TABLE</span> employees ;</code></pre></div><p>（9）查看当前用户：</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">USER</span>() ;</code></pre></div><h2 id="1-6-用户管理"><a href="#1-6-用户管理" class="headerlink" title="1.6 用户管理"></a>1.6 用户管理</h2><p>暂时省略。</p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Security基础知识</title>
    <link href="/2025/09/09/SpringSecurity/"/>
    <url>/2025/09/09/SpringSecurity/</url>
    
    <content type="html"><![CDATA[<h1 id="1-基础知识"><a href="#1-基础知识" class="headerlink" title="1. 基础知识"></a>1. 基础知识</h1><p>（1）官方文档</p><div class="code-wrapper"><pre><code class="hljs url">https://docs.spring.io/spring-security/reference/index.html</code></pre></div><h1 id="2-入门案例"><a href="#2-入门案例" class="headerlink" title="2. 入门案例"></a>2. 入门案例</h1><h2 id="2-1-创建项目"><a href="#2-1-创建项目" class="headerlink" title="2.1 创建项目"></a>2.1 创建项目</h2><p>创建SpringBoot项目，导入以下依赖：</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>thymeleaf-extras-springsecurity6<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.security<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-security-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><h2 id="2-2-创建IndexController"><a href="#2-2-创建IndexController" class="headerlink" title="2.2 创建IndexController"></a>2.2 创建IndexController</h2><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IndexController</span> &#123;    <span class="hljs-meta">@GetMapping(&quot;/&quot;)</span>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">()</span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;    &#125;&#125;</code></pre></div><h2 id="2-3-创建index-html"><a href="#2-3-创建index-html" class="headerlink" title="2.3 创建index.html"></a>2.3 创建index.html</h2><p>（1）在路径resources&#x2F;templates中创建index.html</p><div class="code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>已登录页面<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>登录成功<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;logout&#125;&quot;</span>&gt;</span>注销登录<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre></div><p>（2）通过使用<code>&lt;a th:href=&quot;@&#123;/logout&#125;&quot;&gt;&lt;/a&gt;</code>，Thymeleaf将自动处理生成正确的URL，以适应当前的上下文路径。这样，无论应用程序部署在哪个上下文路径下，生成的URL都能正确地指向注销功能。</p><p>（3）使用<code>&lt;a href=&quot;/logout&quot;&gt;/a&gt;</code>，当我们应用部署位置变了，将不能正确指向注销功能地址。</p><h2 id="2-4-启动项目，测试"><a href="#2-4-启动项目，测试" class="headerlink" title="2.4 启动项目，测试"></a>2.4 启动项目，测试</h2><p>（1）浏览器访问地址：</p><div class="code-wrapper"><pre><code class="hljs url">http://localhost:8080/</code></pre></div><p>（2）浏览器自动跳转到登录页面：</p><div class="code-wrapper"><pre><code class="hljs url">http://localhost:8080/login</code></pre></div><p><img src="/2025/09/09/SpringSecurity/%E9%BB%98%E8%AE%A4%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2.png" alt="默认登录页面"></p><ul><li><p>默认用户名：<code>user</code></p></li><li><p>密码：在控制台日志中，查找生成的默认随机密码</p></li></ul><p>（4）点击<code>Sign in</code>进行登录，浏览器就跳转到了<code>index</code>页面。</p><p>（5）在<code>index</code>页面，可以进行退出登录操作。</p><h2 id="2-5-注意事项"><a href="#2-5-注意事项" class="headerlink" title="2.5 注意事项"></a>2.5 注意事项</h2><p>（1）<code>&lt;a th:href=&quot;@&#123;/logout&#125;&quot;&gt;&lt;/a&gt;</code>的作用：</p><ul><li>Thymeleaf 将自动处理生成正确的 URL。</li><li>无论应用程序部署在哪个上下文路径下，生成的 URL 都能正确地指向注销功能。</li></ul><p>（2）<code>application.properties</code>增加配置：</p><div class="code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">server.servlet.context-path</span>=<span class="hljs-string">/demo</span></code></pre></div><ul><li><p><code>&lt;a th:href=&quot;@&#123;/logout&#125;&quot;&gt;&lt;/a&gt;</code>可以正确获得URL：<code>http://localhost:8080/demo/logout</code></p></li><li><p><code>&lt;a href=&quot;/logout&quot;&gt;&lt;/a&gt;</code>获取到的URL永远都是：<code>http://localhost:8080/logout</code></p></li></ul><h2 id="2-6-入门案例解释"><a href="#2-6-入门案例解释" class="headerlink" title="2.6 入门案例解释"></a>2.6 入门案例解释</h2><p>Spring Security默认做了什么？</p><ul><li>保护应用程序 URL，要求对应用程序的任何交互进行身份验证。</li><li>程序启动时生成一个默认用户<code>user</code>。</li><li>生成一个默认的随机密码，并将此密码记录在控制台上。</li><li>生成默认的登录表单和注销页面。</li><li>提供基于表单的登录和注销流程。</li><li>对于 Web 请求，重定向到登录页面；</li><li>对于服务请求，返回401未经授权。</li><li>处理跨站请求伪造（CSRF）攻击。</li><li>处理会话劫持攻击。</li><li>写入<code>Strict-Transport-Security</code>以确保 HTTPS。</li><li>写入<code>X-Content-Type-Options</code>以处理嗅探攻击。</li><li>写入<code>Cache Control</code>头来保护经过身份验证的资源。</li><li>写入<code>X-Frame-Options</code>以处理点击劫持攻击。</li></ul><h1 id="3-用户认证"><a href="#3-用户认证" class="headerlink" title="3. 用户认证"></a>3. 用户认证</h1><p>（1）官方文档：</p><div class="code-wrapper"><pre><code class="hljs url">https://docs.spring.io/spring-security/reference/servlet/configuration/java.html</code></pre></div><p>（2）基于入门案例创建项目。</p><h2 id="3-1-基于配置文件"><a href="#3-1-基于配置文件" class="headerlink" title="3.1 基于配置文件"></a>3.1 基于配置文件</h2><p><code>application.properties</code></p><div class="code-wrapper"><pre><code class="hljs properties"><span class="hljs-comment"># Spring Security 配置用户名和密码，如果配置类中配置了密码加密，这里密码也要加密</span><span class="hljs-comment"># 如果采用从数据库读取用户信息，这里可以不配置，配置了也没用（后续方式）</span><span class="hljs-attr">spring.security.user.name</span>=<span class="hljs-string">aaa</span><span class="hljs-attr">spring.security.user.password</span>=<span class="hljs-string">123456</span></code></pre></div><h2 id="3-2-基于内存的配置"><a href="#3-2-基于内存的配置" class="headerlink" title="3.2 基于内存的配置"></a>3.2 基于内存的配置</h2><h3 id="3-2-1-创建自定义配置（1）"><a href="#3-2-1-创建自定义配置（1）" class="headerlink" title="3.2.1 创建自定义配置（1）"></a>3.2.1 创建自定义配置（1）</h3><blockquote><p>[!CAUTION]</p><p>使用默认加密方式，不要自定义密码加密方式。</p></blockquote><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.User;<span class="hljs-meta">@Configuration</span><span class="hljs-meta">@EnableWebSecurity</span> <span class="hljs-comment">// Spring项目总需要添加此注解，SpringBoot项目中不需要</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSecurityConfig</span> &#123;    <span class="hljs-meta">@Bean</span>    <span class="hljs-keyword">public</span> UserDetailsService <span class="hljs-title function_">userDetailsService</span><span class="hljs-params">()</span> &#123;        <span class="hljs-type">InMemoryUserDetailsManager</span> <span class="hljs-variable">manager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryUserDetailsManager</span>();        manager.createUser( <span class="hljs-comment">// 此行设置断点可以查看创建的user对象</span>                User                        .withDefaultPasswordEncoder() <span class="hljs-comment">// 密码加密方式</span>                        .username(<span class="hljs-string">&quot;test&quot;</span>) <span class="hljs-comment">// 自定义用户名</span>                        .password(<span class="hljs-string">&quot;test123&quot;</span>) <span class="hljs-comment">// 自定义密码</span>                        .roles(<span class="hljs-string">&quot;USER&quot;</span>) <span class="hljs-comment">// 自定义角色</span>                        .build() <span class="hljs-comment">// 创建用户</span>        );        <span class="hljs-comment">// 实现多用户</span>        manager.createUser( <span class="hljs-comment">// 此行设置断点可以查看创建的user对象</span>                User                        .withDefaultPasswordEncoder()                        .username(<span class="hljs-string">&quot;admin&quot;</span>)                        .password(<span class="hljs-string">&quot;admin123&quot;</span>)                        .roles(<span class="hljs-string">&quot;ADMIN&quot;</span>)                        .build()        );        <span class="hljs-keyword">return</span> manager;    &#125;&#125;</code></pre></div><h3 id="3-2-2-创建自定义配置（2）"><a href="#3-2-2-创建自定义配置（2）" class="headerlink" title="3.2.2 创建自定义配置（2）"></a>3.2.2 创建自定义配置（2）</h3><blockquote><p>自定义密码加密方式。</p></blockquote><p>（1）配置自定义加密方式</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> &#123;    <span class="hljs-meta">@Bean</span>    <span class="hljs-keyword">public</span> PasswordEncoder <span class="hljs-title function_">passwordEncoder</span><span class="hljs-params">()</span> &#123;        <span class="hljs-comment">// 配置密码是BCrypt加密规则</span>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>();    &#125;&#125;</code></pre></div><p>（2）配置用户</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserConfig</span> &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> PasswordEncoder passwordEncoder; <span class="hljs-comment">// 使用注入方式，不能和上面加密方式在一个class文件</span>    <span class="hljs-meta">@Bean</span>    <span class="hljs-keyword">public</span> UserDetailsService <span class="hljs-title function_">userDetailsService</span><span class="hljs-params">()</span> &#123;        <span class="hljs-type">String</span> <span class="hljs-variable">testEncodePassword</span> <span class="hljs-operator">=</span> passwordEncoder.encode(<span class="hljs-string">&quot;test123&quot;</span>);        <span class="hljs-type">String</span> <span class="hljs-variable">adminEncodePassword</span> <span class="hljs-operator">=</span> passwordEncoder.encode(<span class="hljs-string">&quot;admin123&quot;</span>);        <span class="hljs-type">InMemoryUserDetailsManager</span> <span class="hljs-variable">manager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryUserDetailsManager</span>();        manager.createUser(                User                        .builder() <span class="hljs-comment">// 创建用户</span>                        .username(<span class="hljs-string">&quot;test&quot;</span>) <span class="hljs-comment">// 自定义用户名</span>                        .password(testEncodePassword) <span class="hljs-comment">// 自定义密码</span>                        .roles(<span class="hljs-string">&quot;USER&quot;</span>) <span class="hljs-comment">// 自定义角色</span>                        .build() <span class="hljs-comment">// 创建用户</span>        );        <span class="hljs-comment">// 实现多用户</span>        manager.createUser(                User.builder()                        .username(<span class="hljs-string">&quot;admin&quot;</span>)                        .password(adminEncodePassword)                        .roles(<span class="hljs-string">&quot;ADMIN&quot;</span>)                        .build()        );        <span class="hljs-keyword">return</span> manager;    &#125;&#125;</code></pre></div><h3 id="3-2-3-基于内存的用户认证流程"><a href="#3-2-3-基于内存的用户认证流程" class="headerlink" title="3.2.3 基于内存的用户认证流程"></a>3.2.3 基于内存的用户认证流程</h3><p>（1）程序启动时：</p><ul><li>创建<code>InMemoryUserDetailsManager</code>对象</li><li>创建<code>User</code>对象，封装用户名密码</li><li>使用<code>InMemoryUserDetailsManager</code>将<code>User</code>存入内存</li></ul><p>（2）校验用户时：</p><ul><li>SpringSecurity自动使用<code>InMemoryUserDetailsManager</code>的<code>loadUserByUsername</code>方法从<strong>内存中</strong>获取User对象。</li><li>在<code>UsernamePasswordAuthenticationFilter</code>过滤器中的<code>attemptAuthentication</code>方法中将用户输入的用户名密码和从内存中获取到的用户信息进行比较，进行用户认证。</li></ul><h2 id="3-3-基于数据库的配置"><a href="#3-3-基于数据库的配置" class="headerlink" title="3.3 基于数据库的配置"></a>3.3 基于数据库的配置</h2><h3 id="3-3-0-密码编码"><a href="#3-3-0-密码编码" class="headerlink" title="3.3.0 密码编码"></a>3.3.0 密码编码</h3><p>（1）SpringSecurity不可以使用直接使用明文密码。</p><p>（2）获取基于BCrypt强哈希算法的密码。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> &#123;    <span class="hljs-comment">// 创建BCryptPasswordEncoder实例</span>    <span class="hljs-type">BCryptPasswordEncoder</span> <span class="hljs-variable">passwordEncoder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>();    <span class="hljs-comment">// 明文密码</span>    <span class="hljs-type">String</span> <span class="hljs-variable">rawPassword</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;admin123&quot;</span>;    <span class="hljs-comment">// 加密密码</span>    <span class="hljs-type">String</span> <span class="hljs-variable">encodedPassword</span> <span class="hljs-operator">=</span> passwordEncoder.encode(rawPassword);    System.out.println(<span class="hljs-string">&quot;原始密码: &quot;</span> + rawPassword);    System.out.println(<span class="hljs-string">&quot;加密后密码: &quot;</span> + encodedPassword);&#125;</code></pre></div><p>（3）获取到的加密密码，用户创建数据库。</p><div class="code-wrapper"><pre><code class="hljs text">$2a$10$0mzdPyRYPWxfTvxTLnEqS.w0lC27yfs6rXBUk4O6pjdfSrq01oRTC</code></pre></div><ul><li><code>$2a$</code>：算法标识符。</li><li><code>10$</code>：成本因子（迭代次数为 2^10 &#x3D; 1024）</li><li><code>0mzdPyRYPWxfTvxTLnEqS</code>：22字符的盐值。</li><li><code>w0lC27yfs6rXBUk4O6pjdfSrq01oRTC</code>：31字符的哈希结果。</li></ul><p>（4）多试几次，会发现同一个密码每次的哈希值都不一样，但是不影响密码核对，因为当验证密码时，BCryptPasswordEncoder 会：</p><ul><li><p>从存储的加密字符串中提取盐值。</p></li><li><p>使用该盐值对用户输入的密码进行哈希。</p></li><li><p>比较新生成的哈希值与存储的哈希值是否匹配。</p></li></ul><h3 id="3-3-1-数据库配置"><a href="#3-3-1-数据库配置" class="headerlink" title="3.3.1 数据库配置"></a>3.3.1 数据库配置</h3><p>（1）添加依赖：MyBatis、Lombok、MySQL Driver</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>annotationProcessor<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><p>（2）创建数据库表并插入三个测试数据：<code>admin(admin123)</code>表示用户名admin，密码admin23</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-comment">-- 创建数据库</span><span class="hljs-keyword">CREATE</span> DATABASE `security_demo`;USE `security_demo`;<span class="hljs-comment">-- 创建用户表</span><span class="hljs-keyword">CREATE TABLE</span> `<span class="hljs-keyword">user</span>`(`id` <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT NULL</span> AUTO_INCREMENT <span class="hljs-keyword">PRIMARY KEY</span>,`username` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> ,`password` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">500</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,`enabled` <span class="hljs-type">BOOLEAN</span> <span class="hljs-keyword">NOT NULL</span>);<span class="hljs-comment">-- 唯一索引</span><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">UNIQUE</span> INDEX `user_username_uindex` <span class="hljs-keyword">ON</span> `<span class="hljs-keyword">user</span>`(`username`); <span class="hljs-comment">-- 插入用户数据admin(admin123),test(test123),user(user123)</span><span class="hljs-keyword">INSERT INTO</span> `<span class="hljs-keyword">user</span>` (`username`, `password`, `enabled`) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-string">&#x27;$2a$10$0mzdPyRYPWxfTvxTLnEqS.w0lC27yfs6rXBUk4O6pjdfSrq01oRTC&#x27;</span>, <span class="hljs-literal">TRUE</span>),(<span class="hljs-string">&#x27;test&#x27;</span>, <span class="hljs-string">&#x27;$2a$10$jNMx0hKrVmvwydgoWCeW0.OOXL.a3d523ICKkC9aOhhxP0wKztHzK&#x27;</span>, <span class="hljs-literal">TRUE</span>),(<span class="hljs-string">&#x27;user&#x27;</span>, <span class="hljs-string">&#x27;$2a$10$NPZtZJ/oDAuLaaAU/CZ7KeeUm5Z8vgGeV5fcZ8Z2pgitPRp66ERLC&#x27;</span>, <span class="hljs-literal">TRUE</span>);</code></pre></div><p>（3）配置数据源</p><div class="code-wrapper"><pre><code class="hljs properties"><span class="hljs-comment"># MySQL 数据源配置</span><span class="hljs-attr">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/security_demo</span><span class="hljs-attr">spring.datasource.username</span>=<span class="hljs-string">root</span><span class="hljs-attr">spring.datasource.password</span>=<span class="hljs-string">xyc123456</span><span class="hljs-comment"></span><span class="hljs-comment"># MyBatis 日志</span><span class="hljs-attr">mybatis.configuration.log-impl</span>=<span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span></code></pre></div><p>（4）创建数据表user对应的实体类</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;    <span class="hljs-keyword">private</span> Integer id;    <span class="hljs-keyword">private</span> String username;    <span class="hljs-keyword">private</span> String password;    <span class="hljs-keyword">private</span> Boolean enabled;&#125;</code></pre></div><p>（5）Mapper</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span> <span class="hljs-comment">// 注解标识该接口为MyBatis的Mapper接口，主类上使用@MapperScan注解扫描该接口</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;    <span class="hljs-comment">// 查询所有用户</span>    <span class="hljs-meta">@Select(&quot;SELECT * FROM user&quot;)</span>    List&lt;User&gt; <span class="hljs-title function_">getAllUsers</span><span class="hljs-params">()</span>;    <span class="hljs-comment">// 根据用户名查询用户，后续使用</span>    <span class="hljs-meta">@Select(&quot;SELECT * FROM user WHERE username=#&#123;username&#125;&quot;)</span>    User <span class="hljs-title function_">getUserByUsername</span><span class="hljs-params">(<span class="hljs-meta">@PathParam(&quot;username&quot;)</span> String username)</span>;&#125;</code></pre></div><p>（6）开启Mapper扫描</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@MapperScan(&quot;com.xyc.security.thymeleafsecurity.mapper&quot;)</span> <span class="hljs-comment">// 可以标注在主类上</span></code></pre></div><blockquote><p><code>@MapperScan(&quot;包&quot;)</code>一般标注在主类上，也可以标注在任何一个配置类上（有<code>@Configuration</code>注解的类上）。</p></blockquote><p>（7）Service接口与实现类</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;    <span class="hljs-comment">// 获取所有用户信息的方法</span>    List&lt;User&gt; <span class="hljs-title function_">getAllUsers</span><span class="hljs-params">()</span>;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> UserMapper userMapper;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">getAllUsers</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> userMapper.getAllUsers();    &#125;&#125;</code></pre></div><blockquote><p>[!CAUTION]</p><p>@Service标注在实现类上。</p></blockquote><p>（8）Controller</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> UserService userService;    <span class="hljs-meta">@GetMapping(&quot;/userlist&quot;)</span> <span class="hljs-comment">// 用户列表</span>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsers</span><span class="hljs-params">(Model model)</span> &#123;        model.addAttribute(<span class="hljs-string">&quot;user&quot;</span>, userService.getAllUsers());        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;list&quot;</span>; <span class="hljs-comment">// 页面</span>    &#125;&#125;</code></pre></div><p>（9）在路径resources&#x2F;templates中创建<code>list.html</code></p><div class="code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>用户列表<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container mt-4&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>用户列表<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/adduser&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;</span>添加用户<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;table table-striped&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>ID<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>用户名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>密码<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;user : $&#123;user&#125;&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user.id&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user.username&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user.password&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-info btn-sm&quot;</span>&gt;</span>查看<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-warning btn-sm&quot;</span>&gt;</span>编辑<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-danger btn-sm&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;return confirm(&#x27;确定删除吗？&#x27;)&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre></div><p>（10）浏览器访问：</p><div class="code-wrapper"><pre><code class="hljs url">localhost:8080/userlist</code></pre></div><ul><li><p>需要先登录，看看是默认用户名密码还是之前内存配置的用户名密码。</p></li><li><p>能正确获取数据库中的数据，表示此步骤配置正确。</p></li></ul><h3 id="3-3-2-基于数据库的用户认证流程"><a href="#3-3-2-基于数据库的用户认证流程" class="headerlink" title="3.3.2 基于数据库的用户认证流程"></a>3.3.2 基于数据库的用户认证流程</h3><p>（1）程序启动时：</p><ul><li>创建<code>DBUserDetailsManager</code>类，实现接口 <code>UserDetailsManager</code>、<code>UserDetailsPasswordService</code></li><li>在应用程序中初始化这个类的对象</li></ul><p>（2）校验用户时：</p><ul><li>SpringSecurity自动使用<code>DBUserDetailsManager</code>的<code>loadUserByUsername</code>方法从<strong>数据库中</strong>获取<code>User</code>对象</li><li>在<code>UsernamePasswordAuthenticationFilter</code>过滤器中的<code>attemptAuthentication</code>方法中将用户输入的用户名密码和从数据库中获取到的用户信息进行比较，进行用户认证。</li></ul><p>（3）<code>UserDetailsManager</code> 接口：提供用户管理功能（创建、更新、删除用户等）。</p><p>（4）<code>UserDetailsPasswordService</code> 接口：提供密码更新功能。</p><h3 id="3-3-3-实现基于数据库的用户认证"><a href="#3-3-3-实现基于数据库的用户认证" class="headerlink" title="3.3.3 实现基于数据库的用户认证"></a>3.3.3 实现基于数据库的用户认证</h3><blockquote><p>请将基于内存的用户认证功能去除。将该类的<code>@Configuration</code>注解去掉即可。</p></blockquote><p>（1）配置密码加密格式：</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> &#123;    <span class="hljs-meta">@Bean</span>    <span class="hljs-keyword">public</span> PasswordEncoder <span class="hljs-title function_">passwordEncoder</span><span class="hljs-params">()</span> &#123;        <span class="hljs-comment">// 配置密码是BCrypt加密规则</span>         <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>();    &#125;&#125;</code></pre></div><p>（2）在<code>service</code>包下定义<code>DBUserDetailsManager</code></p><div class="code-wrapper"><pre><code class="hljs Java"><span class="hljs-keyword">import</span> com.xyc.security.thymeleafsecurity.mapper.UserMapper;<span class="hljs-keyword">import</span> com.xyc.security.thymeleafsecurity.pojo.User;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> org.springframework.security.core.GrantedAuthority;<span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetails;<span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetailsPasswordService;<span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UsernameNotFoundException;<span class="hljs-keyword">import</span> org.springframework.security.provisioning.UserDetailsManager;<span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<span class="hljs-keyword">import</span> java.util.ArrayList;<span class="hljs-keyword">import</span> java.util.Collection;<span class="hljs-meta">@Service</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DBUserDetailsManager</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDetailsManager</span>, UserDetailsPasswordService &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> UserMapper userMapper;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> UserDetails <span class="hljs-title function_">updatePassword</span><span class="hljs-params">(UserDetails user, String newPassword)</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createUser</span><span class="hljs-params">(UserDetails user)</span> &#123;&#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateUser</span><span class="hljs-params">(UserDetails user)</span> &#123;&#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteUser</span><span class="hljs-params">(String username)</span> &#123;&#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changePassword</span><span class="hljs-params">(String oldPassword, String newPassword)</span> &#123;&#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">userExists</span><span class="hljs-params">(String username)</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> UserDetails <span class="hljs-title function_">loadUserByUsername</span><span class="hljs-params">(String username)</span> <span class="hljs-keyword">throws</span> UsernameNotFoundException &#123;        <span class="hljs-keyword">if</span> (username == <span class="hljs-literal">null</span> || username.trim().isEmpty()) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernameNotFoundException</span>(<span class="hljs-string">&quot;用户名不能为空&quot;</span>);        &#125;        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.getUserByUsername(username);        <span class="hljs-keyword">if</span> (user == <span class="hljs-literal">null</span>) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernameNotFoundException</span>(<span class="hljs-string">&quot;用户：&quot;</span>+username+ <span class="hljs-string">&quot;，不存在&quot;</span>);        &#125;        System.out.println(<span class="hljs-string">&quot;查询到的用户信息：&quot;</span>+user);        <span class="hljs-comment">// 将用户信息转换为Spring Security的UserDetails对象</span>        Collection&lt;GrantedAuthority&gt; authorities = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">org</span>.springframework.security.core.userdetails.User(                user.getUsername(),                user.getPassword(),                user.getEnabled(),                <span class="hljs-literal">true</span>, <span class="hljs-comment">// 用户账号是否过期</span>                <span class="hljs-literal">true</span>, <span class="hljs-comment">// 用户凭证是否过期</span>                <span class="hljs-literal">true</span>, <span class="hljs-comment">// 用户是否未被锁定</span>                authorities); <span class="hljs-comment">// 权限列表</span>    &#125;&#125;</code></pre></div><p>（3）使用数据库中配置的用户名和密码进行登录。</p><h2 id="3-4-默认配置"><a href="#3-4-默认配置" class="headerlink" title="3.4 默认配置"></a>3.4 默认配置</h2><p>Spring Security 如何知道要求所有用户都经过身份验证？Spring Security 如何知道我们想要支持基于表单的身份验证？实际上，有一个配置类（称为 <code>SecurityFilterChain</code>）在后台被调用。它配置了以下默认实现：</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><span class="hljs-keyword">public</span> SecurityFilterChain <span class="hljs-title function_">filterChain</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;    <span class="hljs-comment">// authorizeHttpRequests()：开启授权保护</span>    <span class="hljs-comment">// anyRequest()：对所有请求开启授权保护</span>    <span class="hljs-comment">// authenticated()：已认证请求会自动被授权</span>    http        .authorizeHttpRequests(authorize -&gt; authorize.anyRequest().authenticated())        .formLogin(withDefaults()) <span class="hljs-comment">// 表单授权方式</span>        .httpBasic(withDefaults()); <span class="hljs-comment">// 基本授权方式</span>    <span class="hljs-keyword">return</span> http.build();&#125;</code></pre></div><h2 id="3-5-添加用户"><a href="#3-5-添加用户" class="headerlink" title="3.5 添加用户"></a>3.5 添加用户</h2><h3 id="3-5-1-添加用户的逻辑"><a href="#3-5-1-添加用户的逻辑" class="headerlink" title="3.5.1 添加用户的逻辑"></a>3.5.1 添加用户的逻辑</h3><img src="/2025/09/09/SpringSecurity/添加用户流程.svg" alt="添加用户流程" style="zoom:110%;"><p>（1）<code>UserService</code>：</p><ul><li>实现密码加密逻辑</li><li>利用用户输入和加密密码创建<code>UserDetails</code></li></ul><p>（2）<code>DBUserUserDetailsManager</code>：</p><ul><li>身份验证</li><li>对用户授权</li><li>用户账户状态检查</li><li>完成后将数据插入数据库</li></ul><h3 id="3-5-2-实现用户添加"><a href="#3-5-2-实现用户添加" class="headerlink" title="3.5.2 实现用户添加"></a>3.5.2 实现用户添加</h3><p>（1）Controller</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;    <span class="hljs-comment">// 添加用户,跳转到添加用户页面</span>    <span class="hljs-meta">@GetMapping(&quot;/adduser&quot;)</span>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">addUser</span><span class="hljs-params">(Model model)</span> &#123;        model.addAttribute(<span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-keyword">new</span>  <span class="hljs-title class_">User</span>());        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;form&quot;</span>; <span class="hljs-comment">// 完成视图跳转</span>    &#125;    <span class="hljs-comment">// 完成用户添加</span>    <span class="hljs-meta">@PostMapping(&quot;/saveuser&quot;)</span>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">saveUser</span><span class="hljs-params">(<span class="hljs-meta">@ModelAttribute</span> User user)</span> &#123;        userService.addUser(user);        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/userlist&quot;</span>; <span class="hljs-comment">// 执行完成后重定向到用户列表</span>    &#125;&#125;</code></pre></div><p>（2）<code>list.html</code></p><div class="code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/adduser&#125;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;</span>添加用户<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></code></pre></div><p>（3）<code>form.html</code></p><div class="code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user.id&#125; ? &#x27;编辑用户&#x27; : &#x27;添加用户&#x27;&quot;</span>&gt;</span>用户表单<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container mt-4&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;user.id&#125; ? &#x27;编辑用户&#x27; : &#x27;添加用户&#x27;&quot;</span>&gt;</span>用户表单<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/saveuser&#125;&quot;</span> <span class="hljs-attr">th:object</span>=<span class="hljs-string">&quot;$&#123;user&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-3&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-label&quot;</span>&gt;</span>用户名<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">th:field</span>=<span class="hljs-string">&quot;*&#123;username&#125;&quot;</span> <span class="hljs-attr">required</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-3&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-label&quot;</span>&gt;</span>密码<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">th:field</span>=<span class="hljs-string">&quot;*&#123;password&#125;&quot;</span> <span class="hljs-attr">required</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-success&quot;</span>&gt;</span>保存<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/userlist&#125;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-secondary&quot;</span>&gt;</span>取消<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre></div><ul><li>真正执行添加用户的Controller</li></ul><div class="code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/saveuser&#125;&quot;</span> <span class="hljs-attr">th:object</span>=<span class="hljs-string">&quot;$&#123;user&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span></code></pre></div><ul><li>取消，返回用户列表</li></ul><div class="code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/userlist&#125;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-secondary&quot;</span>&gt;</span>取消<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></code></pre></div><p>（4）Service层接口：<code>UserService.java</code></p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">addUser</span><span class="hljs-params">(User user)</span>;</code></pre></div><p>（5）Service层接口实现：<code>UserServiceImpl.java</code></p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 使用自定义的加密密码</span><span class="hljs-meta">@Autowired</span><span class="hljs-keyword">private</span> PasswordEncoder passwordEncoder;<span class="hljs-comment">// 用户数据的权限管理，例如密码加密、权限管理等</span><span class="hljs-meta">@Autowired</span><span class="hljs-keyword">private</span> DBUserDetailsManager dbUserDetailsManager;<span class="hljs-meta">@Override</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addUser</span><span class="hljs-params">(User user)</span> &#123;    <span class="hljs-type">String</span> <span class="hljs-variable">encodePassword</span> <span class="hljs-operator">=</span> passwordEncoder.encode(user.getPassword());    <span class="hljs-type">UserDetails</span> <span class="hljs-variable">userDetails</span> <span class="hljs-operator">=</span> org.springframework.security.core.userdetails.User            .builder()            .username(user.getUsername()) <span class="hljs-comment">// 自定义用户名</span>            .password(encodePassword) <span class="hljs-comment">// 自定义密码</span>            .build();    dbUserDetailsManager.createUser(userDetails);&#125;</code></pre></div><p>（6）<code>DBUserUserDetailsManager.java</code></p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createUser</span><span class="hljs-params">(UserDetails userDetails)</span> &#123;    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();    user.setUsername(userDetails.getUsername());    user.setPassword(userDetails.getPassword());    user.setEnabled(<span class="hljs-literal">true</span>);    userMapper.insert(user);&#125;</code></pre></div><p>（7）Mapper</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 添加用户信息</span><span class="hljs-meta">@Insert(&quot;INSERT INTO user(username,password,enabled) VALUES(#&#123;username&#125;,#&#123;password&#125;,#&#123;enabled&#125;)&quot;)</span><span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(User user)</span>;</code></pre></div><p>（8）浏览器访问：</p><div class="code-wrapper"><pre><code class="hljs url">http://localhost:8080/userlist</code></pre></div><h3 id="3-6-自定义登录页面"><a href="#3-6-自定义登录页面" class="headerlink" title="3.6 自定义登录页面"></a>3.6 自定义登录页面</h3><p>（1）Controller</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/login&quot;)</span><span class="hljs-keyword">public</span> String <span class="hljs-title function_">login</span><span class="hljs-params">()</span> &#123;    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;login&quot;</span>; <span class="hljs-comment">// 视图</span>&#125;</code></pre></div><ul><li>返回值是视图名称，注意不能是<code>@RestController</code>、<code>@ResponseBody</code>。</li><li>请求方式是GET：<code>@GetMapping</code>。</li></ul><p>（2）<code>login.html</code></p><div class="code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;https://www.thymeleaf.org&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;param.error&#125;&quot;</span>&gt;</span>错误的用户名和密码<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/login&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;用户名&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;密码&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;登录&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre></div><p>（3）添加配置</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><span class="hljs-keyword">public</span> SecurityFilterChain <span class="hljs-title function_">filterChain</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;    http            .authorizeHttpRequests(authorize -&gt; authorize.anyRequest().authenticated())            .formLogin(                    form -&gt; &#123;                        form.loginPage(<span class="hljs-string">&quot;/login&quot;</span>).permitAll() <span class="hljs-comment">// 登录页面无需授权即可访问,</span>                            .usernameParameter(<span class="hljs-string">&quot;username&quot;</span>) <span class="hljs-comment">// 自定义表单用户名参数，默认是username</span>                            .passwordParameter(<span class="hljs-string">&quot;password&quot;</span>) <span class="hljs-comment">// 自定义表单密码参数，默认是password</span>                            .failureUrl(<span class="hljs-string">&quot;/login?error&quot;</span>); <span class="hljs-comment">// 登录失败的返回地址</span>                    &#125;            );    <span class="hljs-comment">//关闭csrf攻击防御</span>    http.csrf( (csrf) -&gt; &#123;csrf.disable();&#125; );    <span class="hljs-keyword">return</span> http.build();&#125;</code></pre></div><p>（4）部分浏览器可能还需要关闭csrf攻击防御</p><h2 id="3-6-修改与删除用户"><a href="#3-6-修改与删除用户" class="headerlink" title="3.6 修改与删除用户"></a>3.6 修改与删除用户</h2><p>略，后续完成</p><h1 id="4-前后端分离"><a href="#4-前后端分离" class="headerlink" title="4. 前后端分离"></a>4. 前后端分离</h1><p>核心：用户认证的流程</p><p>（1）登录成功后调用：AuthenticationSuccessHandler</p><p>（2）登录失败后调用：AuthenticationFailureHandler</p><h2 id="4-1-项目创建"><a href="#4-1-项目创建" class="headerlink" title="4.1 项目创建"></a>4.1 项目创建</h2><p>（1）<code>pom.xml</code></p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.security<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-security-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span></code></pre></div><p>（2）创建数据库，创建数据表对应的实体类，参考前文</p><p>（3）数据库连接</p><p>（4）创建Mapper，根据用户名查找数据</p><p>（5）在<code>service</code>包下定义<code>DBUserDetailsManager</code>，与前文一致</p><p>（6）添加密码加密方式</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> &#123;    <span class="hljs-meta">@Bean</span>    <span class="hljs-keyword">public</span> PasswordEncoder <span class="hljs-title function_">passwordEncoder</span><span class="hljs-params">()</span> &#123;        <span class="hljs-comment">// 配置密码是BCrypt加密规则</span>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>();    &#125;&#125;</code></pre></div><h2 id="4-2-认证成功"><a href="#4-2-认证成功" class="headerlink" title="4.2 认证成功"></a>4.2 认证成功</h2><h3 id="4-2-1-AuthenticationSuccessHandler接口"><a href="#4-2-1-AuthenticationSuccessHandler接口" class="headerlink" title="4.2.1 AuthenticationSuccessHandler接口"></a>4.2.1 AuthenticationSuccessHandler接口</h3><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AuthenticationSuccessHandler</span> &#123;    <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onAuthenticationSuccess</span><span class="hljs-params">(</span><span class="hljs-params">        HttpServletRequest request, </span><span class="hljs-params">        HttpServletResponse response, </span><span class="hljs-params">        FilterChain chain,</span><span class="hljs-params">Authentication authentication</span><span class="hljs-params">    )</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;onAuthenticationSuccess(request, response, authentication);chain.doFilter(request, response);&#125;    <span class="hljs-keyword">void</span> <span class="hljs-title function_">onAuthenticationSuccess</span><span class="hljs-params">(</span><span class="hljs-params">        HttpServletRequest request, </span><span class="hljs-params">        HttpServletResponse response,</span><span class="hljs-params">Authentication authentication</span><span class="hljs-params">    )</span> <span class="hljs-keyword">throws</span> IOException, ServletException;&#125;</code></pre></div><p>（1）<code>onAuthenticationSuccess</code> 方法是 <code>AuthenticationSuccessHandler</code> 接口的核心方法，当用户认证（登录）成功后，Spring Security 会自动调用此方法。此方法中可以自定义认证成功后的行为，例如：</p><ul><li>重定向到指定页面（前后端不分离）</li><li>返回 <code>JSON</code> 响应（前后端分离模式）</li><li>记录日志</li><li>设置用户会话信息等</li></ul><p>（2）<code>onAuthenticationSuccess</code>方法</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onAuthenticationSuccess</span><span class="hljs-params">(</span><span class="hljs-params">    HttpServletRequest request,</span><span class="hljs-params">    HttpServletResponse response,</span><span class="hljs-params">    Authentication authentication</span><span class="hljs-params">)</span> <span class="hljs-keyword">throws</span> IOException, ServletException</code></pre></div><p>（3）参数：<code>HttpServletRequest request</code></p><ul><li><strong>作用</strong>：表示客户端的 HTTP 请求对象。</li><li>获取请求参数： <code>request.getParameter(&quot;param&quot;)</code> 。</li><li>获取请求头信息： <code>request.getHeader(&quot;header&quot;)</code> 。</li><li>获取会话信息： <code>request.getSession()</code> 。</li></ul><p>（4）参数：<code>HttpServletResponse response</code></p><ul><li><strong>作用</strong>：表示服务器的 HTTP 响应对象。</li><li>设置响应状态码： <code>response.setStatus(200)</code> 。</li><li>重定向： <code>response.sendRedirect(&quot;/home&quot;)</code> 。</li><li>返回 JSON 数据： <code>response.getWriter().write(&quot;&#123;\&quot;status\&quot;:\&quot;success\&quot;&#125;&quot;)</code> 。</li><li>设置上下文类型：<code>response.setContentType(&quot;application/json&quot;)</code></li><li>设置字符编码：<code>response.setCharacterEncoding(&quot;UTF-8&quot;)</code></li></ul><p>（5）参数：<code>Authentication authentication</code></p><ul><li><strong>作用</strong>：表示当前认证成功的用户信息。</li><li>获取用户主体： <code>authentication.getPrincipal()</code> 。</li><li>获取用户权限： <code>authentication.getAuthorities()</code> 。</li><li>获取认证方式： <code>authentication.getDetails()</code> 。</li></ul><h3 id="4-2-2-实现认证成功"><a href="#4-2-2-实现认证成功" class="headerlink" title="4.2.2 实现认证成功"></a>4.2.2 实现认证成功</h3><p>（1）处理成功</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAuthenticationSuccessHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AuthenticationSuccessHandler</span> &#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onAuthenticationSuccess</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;        <span class="hljs-comment">// 获取到用户信息</span>        <span class="hljs-type">Object</span> <span class="hljs-variable">principal</span> <span class="hljs-operator">=</span> authentication.getPrincipal();        <span class="hljs-comment">// 输出用户信息</span>        System.out.println(<span class="hljs-string">&quot;登录成功，用户信息为：&quot;</span> + principal);        <span class="hljs-comment">// 将信息存入HashMap</span>        HashMap&lt;String, Object&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();        result.put(<span class="hljs-string">&quot;code&quot;</span>, <span class="hljs-number">200</span>); <span class="hljs-comment">// 状态码</span>        result.put(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;登录成功&quot;</span>);        result.put(<span class="hljs-string">&quot;data&quot;</span>, principal);        <span class="hljs-comment">// 将HashMap转换为JSON字符串并返回</span>        response.setContentType(<span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span>);        response.getWriter().write(result.toString());    &#125;&#125;</code></pre></div><p>（2）添加认证成功配置</p><div class="code-wrapper"><pre><code class="hljs java">form.successHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyAuthenticationSuccessHandler</span>());</code></pre></div><p>（3）浏览器测试</p><h2 id="4-3-认证失败"><a href="#4-3-认证失败" class="headerlink" title="4.3 认证失败"></a>4.3 认证失败</h2><h3 id="4-3-1-AuthenticationFailureHandler接口"><a href="#4-3-1-AuthenticationFailureHandler接口" class="headerlink" title="4.3.1 AuthenticationFailureHandler接口"></a>4.3.1 AuthenticationFailureHandler接口</h3><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AuthenticationFailureHandler</span> &#123;    <span class="hljs-keyword">void</span> <span class="hljs-title function_">onAuthenticationFailure</span><span class="hljs-params">(</span><span class="hljs-params">        HttpServletRequest request, </span><span class="hljs-params">        HttpServletResponse response,</span><span class="hljs-params">        AuthenticationException exception</span><span class="hljs-params">    )</span> <span class="hljs-keyword">throws</span> IOException, ServletException;&#125;</code></pre></div><p>（1）方法参数<code>request</code>，<code>response</code>与前文成功一致。</p><p>（2）<code>AuthenticationException exception</code>参数</p><ul><li><strong>作用</strong>：表示认证失败的异常信息。</li><li>获取失败原因： <code>exception.getMessage()</code> 。</li><li>根据异常类型：<code>BadCredentialsException</code> 定制不同的错误处理逻辑。</li><li>常见异常类型：<ul><li><code>BadCredentialsException</code> ：用户名或密码错误。</li><li><code>AccountExpiredException</code> ：账户已过期。</li><li><code>LockedException</code> ：账户被锁定。</li><li><code>DisabledException</code> ：账户被禁用。</li></ul></li></ul><h3 id="4-3-2-实现认证失败"><a href="#4-3-2-实现认证失败" class="headerlink" title="4.3.2 实现认证失败"></a>4.3.2 实现认证失败</h3><p>（1）处理失败</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAuthenticationFailureHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AuthenticationFailureHandler</span> &#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onAuthenticationFailure</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;        <span class="hljs-comment">// 获取到错误信息</span>        <span class="hljs-type">String</span> <span class="hljs-variable">errorMsg</span> <span class="hljs-operator">=</span> exception.getMessage();        <span class="hljs-comment">// 将信息存入HashMap</span>        HashMap&lt;String, Object&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();        result.put(<span class="hljs-string">&quot;code&quot;</span>, -<span class="hljs-number">1</span>); <span class="hljs-comment">// 状态码</span>        result.put(<span class="hljs-string">&quot;msg&quot;</span>, errorMsg); <span class="hljs-comment">// 错误信息</span>        result.put(<span class="hljs-string">&quot;data&quot;</span>, <span class="hljs-literal">null</span>); <span class="hljs-comment">// 数据为空，因为登录失败，没有数据返回</span>        <span class="hljs-comment">// 将HashMap转换为JSON字符串并返回</span>        response.setContentType(<span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span>);        response.getWriter().write(result.toString());    &#125;&#125;</code></pre></div><p>（2）添加认证的配置</p><div class="code-wrapper"><pre><code class="hljs java">form.failureHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyAuthenticationFailureHandler</span>());</code></pre></div><h2 id="4-4-注销登录"><a href="#4-4-注销登录" class="headerlink" title="4.4 注销登录"></a>4.4 注销登录</h2><p>（1）接口参数与成功登录一致。</p><p>（2）实现注销登录</p><div class="code-wrapper"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyLogoutSuccessHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">LogoutSuccessHandler</span> &#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onLogoutSuccess</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;        <span class="hljs-comment">// 获取到用户信息</span>        <span class="hljs-type">Object</span> <span class="hljs-variable">principal</span> <span class="hljs-operator">=</span> authentication.getPrincipal();        <span class="hljs-comment">// 输出用户信息</span>        System.out.println(<span class="hljs-string">&quot;已退出登录，用户信息为：&quot;</span> + principal);        <span class="hljs-comment">// 将信息存入HashMap</span>        HashMap&lt;String, Object&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();        result.put(<span class="hljs-string">&quot;code&quot;</span>, <span class="hljs-number">0</span>); <span class="hljs-comment">// 状态码</span>        result.put(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;成功退出登录&quot;</span>);        result.put(<span class="hljs-string">&quot;data&quot;</span>, principal);        <span class="hljs-comment">// 将HashMap转换为JSON字符串并返回</span>        response.setContentType(<span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span>);        response.getWriter().write(result.toString());    &#125;&#125;</code></pre></div><p>（3）添加配置</p><div class="code-wrapper"><pre><code class="hljs Java">http.logout(logout -&gt; &#123;    logout.logoutSuccessHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyLogoutSuccessHandler</span>()); <span class="hljs-comment">//注销成功时的处理</span>&#125;);</code></pre></div><h2 id="4-5-处理未认证"><a href="#4-5-处理未认证" class="headerlink" title="4.5 处理未认证"></a>4.5 处理未认证</h2><h3 id="4-5-1-AuthenticationEntryPoint接口"><a href="#4-5-1-AuthenticationEntryPoint接口" class="headerlink" title="4.5.1 AuthenticationEntryPoint接口"></a>4.5.1 AuthenticationEntryPoint接口</h3><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AuthenticationEntryPoint</span> &#123;    <span class="hljs-keyword">void</span> <span class="hljs-title function_">commence</span><span class="hljs-params">(</span><span class="hljs-params">        HttpServletRequest request, </span><span class="hljs-params">        HttpServletResponse response, </span><span class="hljs-params">        AuthenticationException authException</span><span class="hljs-params">    )</span><span class="hljs-keyword">throws</span> IOException, ServletException;&#125;</code></pre></div><p>（1）实现<code>AuthenticationEntryPoint</code> 接口的类，主要用于处理用户<strong>未认证</strong>（即未登录或认证信息无效）时的逻辑。</p><p>（2）<code>commence</code> 方法会在以下场景被调用：</p><ul><li><p>用户访问受保护的资源但未提供认证信息（如未登录）。</p></li><li><p>提供的认证信息无效（如 Token 过期或格式错误）。</p></li></ul><p>（3）方法参数<code>AuthenticationException authException</code></p><ul><li><strong>作用</strong>：表示认证失败的异常信息。</li><li>获取失败原因： <code>authException.getMessage()</code> 。</li><li>根据异常类型定制不同响应：如 Token 过期时返回特定错误码。</li><li>常见异常类型：<ul><li><code>InsufficientAuthenticationException</code> ：未提供认证信息。</li><li><code>BadCredentialsException</code> ：凭证无效。</li></ul></li></ul><h3 id="4-5-2-处理未认证"><a href="#4-5-2-处理未认证" class="headerlink" title="4.5.2 处理未认证"></a>4.5.2 处理未认证</h3><p>（1）实现接口</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAuthenticationEntryPoint</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AuthenticationEntryPoint</span> &#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">commence</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;        <span class="hljs-comment">// 获取到错误信息</span>        <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> authException.getMessage();        <span class="hljs-comment">// 将信息存入HashMap</span>        HashMap&lt;String, Object&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();        result.put(<span class="hljs-string">&quot;code&quot;</span>, -<span class="hljs-number">1</span>); <span class="hljs-comment">// 状态码</span>        result.put(<span class="hljs-string">&quot;msg&quot;</span>, message); <span class="hljs-comment">// 错误信息</span>        result.put(<span class="hljs-string">&quot;data&quot;</span>, <span class="hljs-literal">null</span>); <span class="hljs-comment">// 数据为空，因为登录失败，没有数据返回</span>        <span class="hljs-comment">// 将HashMap转换为JSON字符串并返回</span>        response.setContentType(<span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span>);        response.getWriter().write(result.toString());    &#125;&#125;</code></pre></div><p>（2）添加配置</p><div class="code-wrapper"><pre><code class="hljs java">http.exceptionHandling(        exception -&gt; &#123;            exception.authenticationEntryPoint(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyAuthenticationEntryPoint</span>()); <span class="hljs-comment">// 未认证接口</span>        &#125;);</code></pre></div><h2 id="4-6-完整配置"><a href="#4-6-完整配置" class="headerlink" title="4.6 完整配置"></a>4.6 完整配置</h2><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JsonSecurityConfig</span> &#123;    <span class="hljs-meta">@Bean</span>    <span class="hljs-keyword">public</span> SecurityFilterChain <span class="hljs-title function_">filterChain</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;        http            .authorizeHttpRequests(authorize -&gt; authorize                .requestMatchers(<span class="hljs-string">&quot;/security/login&quot;</span>).permitAll() <span class="hljs-comment">// 允许登录接口公开访问</span>                .anyRequest().authenticated()            )            .formLogin(                form -&gt; &#123;                    form                        .loginPage(<span class="hljs-string">&quot;/login&quot;</span>) <span class="hljs-comment">// 仅作为标识，实际由前端处理</span>                        .loginProcessingUrl(<span class="hljs-string">&quot;/security/login&quot;</span>) <span class="hljs-comment">// 指定登录接口路径</span>                        .permitAll() <span class="hljs-comment">// 该路径允许所有人访问，不需要认证</span>                        .usernameParameter(<span class="hljs-string">&quot;username&quot;</span>) <span class="hljs-comment">// 自定义表单用户名参数，默认是username</span>                        .passwordParameter(<span class="hljs-string">&quot;password&quot;</span>) <span class="hljs-comment">// 自定义表单密码参数，默认是password</span>                        .successHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyAuthenticationSuccessHandler</span>()) <span class="hljs-comment">// 登录成功处理器</span>                        .failureHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyAuthenticationFailureHandler</span>()) <span class="hljs-comment">// 失败时的处理</span>                        .failureUrl(<span class="hljs-string">&quot;/login?error&quot;</span>) <span class="hljs-comment">// 登录失败的返回地址</span>                    ;                &#125;            )            .logout(                logout -&gt; &#123;                    logout.logoutSuccessHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyLogoutSuccessHandler</span>()); <span class="hljs-comment">// 登出成功处理器</span>                &#125;            )            .exceptionHandling(                exception -&gt; &#123;                    exception.authenticationEntryPoint(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyAuthenticationEntryPoint</span>());                &#125;            )            .cors(withDefaults()) <span class="hljs-comment">// 允许跨域请求</span>            .httpBasic(withDefaults() <span class="hljs-comment">// 基本授权方式;</span>            );        <span class="hljs-keyword">return</span> http.build();    &#125;&#125;</code></pre></div><h2 id="4-7-跨域"><a href="#4-7-跨域" class="headerlink" title="4.7 跨域"></a>4.7 跨域</h2><p>（1）跨域全称是跨域资源共享(Cross-Origin Resources Sharing，CORS)，它是浏览器的保护机制，只允许网页请求统一域名下的服务，同一域名指&#x3D;&gt;协议、域名、端口号都要保持一致，如果有一项不同，那么就是跨域请求。在前后端分离的项目中，需要解决跨域的问题。</p><p>（2）在SpringSecurity中解决跨域很简单，在配置文件中添加如下配置即可：上文配置文件已有。</p><div class="code-wrapper"><pre><code class="hljs java">http.cors(withDefaults());</code></pre></div><h1 id="4-权限管理"><a href="#4-权限管理" class="headerlink" title="4. 权限管理"></a>4. 权限管理</h1><blockquote><p>[!IMPORTANT]</p><p>访问控制：是基于角色或者权限进行控制的。</p></blockquote><h3 id="3-7-1-hasAuthority方法"><a href="#3-7-1-hasAuthority方法" class="headerlink" title="3.7.1 hasAuthority方法"></a>3.7.1 hasAuthority方法</h3><p>（1）作用：查看当前的主体是否具有指定的权限。</p><ul><li>返回<code>true</code>：有权限。</li><li>返回<code>false</code>：没权限。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Spring Security 6</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>安全管理</tag>
      
      <tag>Spring</tag>
      
      <tag>Spring Security 6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java开发常用注解</title>
    <link href="/2025/09/09/%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/"/>
    <url>/2025/09/09/%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Spring-Framework"><a href="#1-Spring-Framework" class="headerlink" title="1. Spring Framework"></a>1. Spring Framework</h1><h2 id="1-1-Component"><a href="#1-1-Component" class="headerlink" title="1.1 @Component"></a>1.1 @Component</h2><p>（1）作用：通用注解，标记类为Spring管理的Bean。</p><p>（2）参数，只有一个默认参数，表示bean的名称，默认就是类名首字母小写。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Component(value = &quot;p1&quot;)</span> <span class="hljs-comment">// 将 Bean 在 ioc 中的名字改为 p1</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;    <span class="hljs-keyword">private</span> Long id;    <span class="hljs-keyword">private</span> String name;&#125;</code></pre></div><p>（3）派生注解：语义化分类，功能与<code>@Component</code>相同</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Service</span>              <span class="hljs-comment">// 业务逻辑层</span><span class="hljs-meta">@Repository</span>           <span class="hljs-comment">// 数据访问层Dao层(自动启用异常转换)</span><span class="hljs-meta">@Controller</span>           <span class="hljs-comment">// Web控制器层</span><span class="hljs-meta">@Configuration</span>        <span class="hljs-comment">// 配置类(内部可定义@Bean方法)</span></code></pre></div><p>（4）标注位置：<code>@Service</code>、<code>@Component</code>、<code>@Repository</code>、<code>@Controller</code> 这些注解的本质是告诉 Spring：<strong>请创建并管理这个类的实例（即 Bean）</strong>。</p><ul><li><strong>接口（Interface）</strong> 是一个抽象的契约，它本身<strong>不能被实例化</strong>。</li><li>当用 <code>@Autowired</code> 注入一个接口（如 <code>UserService</code>）时，Spring 会在它的容器里查找<strong>实现了这个接口的 Bean</strong>。</li></ul><blockquote><p>这个问题在<code>@Service</code>的位置会经常搞错，将注解错误的标注在接口上。</p></blockquote><h2 id="1-2-Autowired"><a href="#1-2-Autowired" class="headerlink" title="1.2 @Autowired"></a>1.2 @Autowired</h2><p>（1）作用：从<code>IoC</code>容器中获取<code>Bean</code>，按类型自动注入依赖。可标注在<strong>字段</strong>、<strong>构造方法</strong>或<code>Setter</code>方法上。</p><p>（2）按类型匹配（ByType）：Spring 首先会在<code>IoC</code>容器中查找与所需依赖<strong>类型匹配</strong>的 Bean。</p><ul><li><strong>找到 1 个</strong>：完美，直接注入。</li><li><strong>找到 0 个</strong>：抛出 <code>NoSuchBeanDefinitionException</code> 异常。</li><li><strong>找到多个</strong>：进入下一步裁决。</li></ul><p>（3）处理找到多个：</p><ul><li><code>@Primary</code>：标注优先被注入的Bean。</li></ul><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><span class="hljs-meta">@Primary</span> <span class="hljs-comment">// 当有多个同类型Bean时，优先选择这个</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JdbcUserRepository</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserRepository</span> &#123;    <span class="hljs-comment">// ...</span>&#125;</code></pre></div><ul><li><code>@Qualifier</code>：解决多个同类型Bean的歧义性问题，按名称注入。</li></ul><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-meta">@Qualifier(&quot;jdbcUserRepository&quot;)</span> <span class="hljs-comment">// 指定要注入的Bean的名称</span>    <span class="hljs-keyword">private</span> UserRepository userRepository;&#125;</code></pre></div><h2 id="1-3-Bean"><a href="#1-3-Bean" class="headerlink" title="1.3 @Bean"></a>1.3 @Bean</h2><p>（1）作用：<code>@Configuration</code>结合<code>@Bean</code>可以在配置类中手动定义复杂<code>Bean</code>，<code>@Bean</code>是一个<strong>方法级</strong>注解。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppConfig</span> &#123;    <span class="hljs-meta">@Bean</span>  <span class="hljs-comment">// 没指定Bean名称，默认为方法名</span>    <span class="hljs-keyword">public</span> MyService <span class="hljs-title function_">myService</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyServiceImpl</span>();  <span class="hljs-comment">// 可自定义初始化逻辑</span>    &#125;        <span class="hljs-meta">@Bean(name = &quot;customName&quot;)</span>  <span class="hljs-comment">// 指定Bean名称</span>    <span class="hljs-meta">@Scope(&quot;prototype&quot;)</span>  <span class="hljs-comment">// 设置作用域</span>    <span class="hljs-keyword">public</span> AnotherBean <span class="hljs-title function_">anotherBean</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnotherBean</span>();    &#125;&#125;</code></pre></div><p>（2）适用场景：</p><ul><li><p>引入第三方库的类（无法修改源码）。</p></li><li><p>需要复杂初始化逻辑的<code>Bean</code>。</p></li><li><p>组件名：默认方法名，可以<code>@Bean(&quot;组件名&quot;)</code>、<code>@Bean(name = &quot;组件名&quot;)</code>改变。</p></li></ul><p>（3）<strong>Bean注册顺序</strong></p><ul><li><p>标注了<code>@Component</code>会先注册，其次是<code>@Import</code>注册，而后再注册使用<code>@Bean</code>注册的组件。</p></li><li><p>如果组件名重复，之前注册的会被覆盖（无论是不是单例模式都会覆盖）。</p></li><li><p>如果类标注了<code>@Component</code>、<code>@Configuration</code>等，<code>@Import</code>不会再注册。</p></li></ul><h2 id="1-4-Import"><a href="#1-4-Import" class="headerlink" title="1.4 @Import"></a>1.4 @Import</h2><h2 id="1-5-Scope"><a href="#1-5-Scope" class="headerlink" title="1.5 @Scope"></a>1.5 @Scope</h2><h1 id="2-Spring-MVC"><a href="#2-Spring-MVC" class="headerlink" title="2. Spring MVC"></a>2. Spring MVC</h1><h2 id="2-1-RequestMapping"><a href="#2-1-RequestMapping" class="headerlink" title="2.1 RequestMapping"></a>2.1 RequestMapping</h2><p>（1）作用：将<strong>请求</strong>和<strong>处理请求的控制器方法</strong>关联起来，建立映射关系。</p><ul><li><p>标识一个类：设置映射请求的请求路径的<strong>初始信息</strong>。</p></li><li><p>标识一个方法：设置映射请求请求路径的<strong>具体信息</strong>。</p></li></ul><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><span class="hljs-meta">@RequestMapping(&quot;/test&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestMappingController</span> &#123;    <span class="hljs-comment">// 此时请求映射所映射的请求的请求路径为：/test/testRequestMapping</span>    <span class="hljs-meta">@RequestMapping(&quot;/testRequestMapping&quot;)</span>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">testRequestMapping</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;    &#125;&#125;</code></pre></div><p>（2）value属性</p><ul><li><p>作用：匹配请求映射，与<code>name</code>、<code>path</code>属性的作用一致。</p></li><li><p>类型：字符串类型的数组，表示该请求映射能够匹配多个请求地址所对应的请求。</p></li><li><p>说明：必须设置。</p></li></ul><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;)</span><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testRequestMapping</span><span class="hljs-params">()</span> &#123;    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;&#125;</code></pre></div><p>（3）method属性：设置请求方式匹配请求映射。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 只接受 POST 请求</span><span class="hljs-meta">@RequestMapping(value = &quot;/create&quot;, method = RequestMethod.POST)</span><span class="hljs-comment">// 允许多种方法（Spring 5.3+）</span><span class="hljs-meta">@RequestMapping(path = &quot;/multi&quot;, method = &#123;RequestMethod.GET, RequestMethod.PUT&#125;)</span></code></pre></div><p>（4）<code>@RequestMapping</code>的派生注解。</p><ul><li><p>处理get请求的映射：<code>@GetMapping</code>。</p></li><li><p>处理post请求的映射：<code>@PostMapping</code>。</p></li><li><p>处理put请求的映射：<code>@PutMapping</code>。</p></li><li><p>处理delete请求的映射：<code>@DeleteMapping</code>。</p></li></ul><h2 id="2-2-RequestParam"><a href="#2-2-RequestParam" class="headerlink" title="2.2 @RequestParam"></a>2.2 @RequestParam</h2><p>（1）作用：将<strong>请求参数和控制器方法的形参</strong>创建映射关系。</p><p>（2）属性：<code>@RequestParam</code>一共有三个属性：</p><ul><li><p>value：指定为形参赋值的请求参数的参数名。</p></li><li><p>required：设置是否必须传输此请求参数，默认值为<code>true</code>。</p></li><li><p>defaultValue：此时<code>required = false</code>，当参数有传入值，使用传入的值；当没有参数值，使用<code>defaultValue</code>设置的值。</p></li></ul><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@ResponseBody</span>  <span class="hljs-comment">// 返回值是json格式</span><span class="hljs-meta">@RequestMapping(&quot;/testControllerParam&quot;)</span><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testControllerParam</span><span class="hljs-params">(</span><span class="hljs-params">        <span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String name,</span><span class="hljs-params">        <span class="hljs-meta">@RequestParam(&quot;password&quot;)</span> String ps)</span> &#123;    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;username = &quot;</span> + name + <span class="hljs-string">&quot;, password = &quot;</span> + ps;&#125;</code></pre></div><h2 id="2-3-RequestHeader"><a href="#2-3-RequestHeader" class="headerlink" title="2.3 @RequestHeader"></a>2.3 @RequestHeader</h2><p>（1）作用：将请求头信息和控制器方法的形参创建映射关系。</p><p>（2）属性：共有三个属性：<code>value</code>、<code>required</code>、<code>defaultValue</code>，用法同<code>@RequestParam</code>。</p><p>（3）虽然在浏览器端请求头一般都是首字母大写，但是实际上是不区分大小写的，都是按小写。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@ResponseBody</span>  <span class="hljs-comment">// 返回值是json格式</span><span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">(</span><span class="hljs-params">        <span class="hljs-meta">@RequestHeader(&quot;User-Agent&quot;)</span> String userAgent,</span><span class="hljs-params">        <span class="hljs-meta">@RequestHeader(value = &quot;host&quot;)</span> String host)</span>&#123;    System.out.println(userAgent);    System.out.println(host);    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello Spring Boot!&quot;</span>;&#125;</code></pre></div><h2 id="2-4-CookieValue"><a href="#2-4-CookieValue" class="headerlink" title="2.4 @CookieValue"></a>2.4 @CookieValue</h2><p>（1）作用：将cookie数据和控制器方法的形参创建映射关系。</p><p>（2）属性：共有三个属性：<code>value</code>、<code>required</code>、<code>defaultValue</code>，用法同<code>@RequestParam</code>。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testParam&quot;)</span><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testParam</span><span class="hljs-params">(</span><span class="hljs-params">        // 将请求的user_name字段的值赋值给username参数</span><span class="hljs-params">        <span class="hljs-meta">@RequestParam(value = &quot;user_name&quot;, required = false, defaultValue = &quot;hehe&quot;)</span> String username,</span><span class="hljs-params">        String password,</span><span class="hljs-params">        String[] hobby,</span><span class="hljs-params">        <span class="hljs-meta">@RequestHeader(value = &quot;sayHaha&quot;, required = true, defaultValue = &quot;haha&quot;)</span> String host,</span><span class="hljs-params">        <span class="hljs-meta">@CookieValue(&quot;JSESSIONID&quot;)</span> String JSESSIONID)</span> &#123;    System.out.println(<span class="hljs-string">&quot;username:&quot;</span> + username + <span class="hljs-string">&quot;,password:&quot;</span> + password +            <span class="hljs-string">&quot;,hobby:&quot;</span> + Arrays.toString(hobby));    System.out.println(<span class="hljs-string">&quot;host:&quot;</span> + host);    System.out.println(<span class="hljs-string">&quot;JSESSIONID:&quot;</span> + JSESSIONID);    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;&#125;</code></pre></div><h2 id="2-5-RequestBody"><a href="#2-5-RequestBody" class="headerlink" title="2.5 @RequestBody"></a>2.5 @RequestBody</h2><p>（1）作用：接收请求发送过来的<code>JSON</code>数据。</p><h2 id="2-6-ResponseBody"><a href="#2-6-ResponseBody" class="headerlink" title="2.6 @ResponseBody"></a>2.6 @ResponseBody</h2><p>（1）作用：</p><ul><li>标识一个控制器方法，可以将该方法的返回值直接作为响应报文的响应体响应到浏览器。</li><li>标识一个控制器类，该类所有方法的返回值直接作为响应报文的响应体响应到浏览器。</li></ul><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testResponseBody&quot;)</span><span class="hljs-meta">@ResponseBody</span>  <span class="hljs-comment">// 把返回值放在响应体中，不是视图</span><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testResponseBody</span><span class="hljs-params">()</span> &#123;    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;&#125;</code></pre></div><h2 id="2-7-RestController"><a href="#2-7-RestController" class="headerlink" title="2.7 @RestController"></a>2.7 @RestController</h2><p>（1）组合注解<code>@RestController</code>：替代<code>@Controller</code>+<code>@ResponseBody</code>。</p><p>（2）作用：自动将返回值转为JSON&#x2F;XML。</p><p>（3）标注在类上，因为<code>@Controller</code>的作用位置是类上。</p><h1 id="3-MyBatis"><a href="#3-MyBatis" class="headerlink" title="3. MyBatis"></a>3. MyBatis</h1><h2 id="Mapper"><a href="#Mapper" class="headerlink" title="@Mapper"></a>@Mapper</h2><p>（1）作用：<code>@Mapper</code>：是一个<strong>标记注解</strong>，用于<strong>声明一个接口是 MyBatis 的 Mapper 接口</strong>。</p><p>（2）核心价值：借助<strong>动态代理</strong>技术，<strong>免去手动编写 DAO 实现类的繁琐工作</strong>，极大提高了开发效率。</p><p>（3）实际使用：更倾向于在配置类或主类上使用 <code>@MapperScan(&quot;包路径&quot;)</code> 来<strong>批量扫描和管理</strong> Mapper 接口。</p><p>（4）没有它行不行？：不行。如果没有这个注解（或 <code>@MapperScan</code>），MyBatis 就无法识别哪些接口需要它来创建代理实现，Spring 也无法将其注入， <code>@Autowired</code> 会失败并报 <strong>找不到Bean</strong> 的错误。</p><h2 id="MapperScan"><a href="#MapperScan" class="headerlink" title="@MapperScan"></a>@MapperScan</h2>]]></content>
    
    
    <categories>
      
      <category>常用注解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Spring</tag>
      
      <tag>注解驱动</tag>
      
      <tag>Spring Boot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java SE</title>
    <link href="/2025/09/07/java/"/>
    <url>/2025/09/07/java/</url>
    
    <content type="html"><![CDATA[<h1 id="1-基础知识"><a href="#1-基础知识" class="headerlink" title="1. 基础知识"></a>1. 基础知识</h1><h2 id="1-1-成员变量的初始化"><a href="#1-1-成员变量的初始化" class="headerlink" title="1.1 成员变量的初始化"></a>1.1 成员变量的初始化</h2><p>（1）成员变量的初始值：</p><ul><li><p>整数型（byte、short、int和long）：默认值为<code>0</code>。</p></li><li><p>单精度浮点型(float)：默认值为<code>0.0f</code>。</p></li><li><p>双精度浮点型(double)：默认值为<code>0.0d</code>。</p></li><li><p>字符型(char)：默认值为<code>\u0000</code>。</p></li><li><p>布尔型：默认值为<code>false</code>。</p></li><li><p>数组等引用类型：默认值为<code>null</code>。</p></li></ul><p>（2）本地变量的初始值：<strong>本地变量不初始化就会报错</strong>。</p><p>（3）long类型必须在数值后面加<code>l</code>或<code>L</code>。</p><h2 id="1-2-for-each语句"><a href="#1-2-for-each语句" class="headerlink" title="1.2 for-each语句"></a>1.2 for-each语句</h2><p>Java5之后提供了一种专门用于<strong>遍历集合</strong>的for循环——for-each循环。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(元素类型 变量 : 遍历对象) &#123;  语句组;&#125;</code></pre></div><p>实例：for each循环的简单使用</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-type">int</span>[] numbers = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span> &#125;;<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> item : numbers) &#123;  System.out.print(item + <span class="hljs-string">&quot;,&quot;</span>);&#125;</code></pre></div><h2 id="1-3-break语句"><a href="#1-3-break语句" class="headerlink" title="1.3 break语句"></a>1.3 break语句</h2><p>（1）break语句可用于while、do-while和for循环结构，它的作用是<strong>强行退出当前循环体</strong>，不再执行循环体中剩余的语句，也可以用于switch语句，跳出当前语句。</p><p>（2）在循环体中使用break语句有两种方式：带有标签和不带标签。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-type">int</span>[] numbers = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span> &#125;;<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numbers.length; i++) &#123;    <span class="hljs-keyword">if</span> (i == <span class="hljs-number">3</span>) &#123; <span class="hljs-comment">// 当条件 i == 3 的时候执行 break 语句，break 语句会终止循环。</span>        <span class="hljs-comment">// 跳出循环，跳出的是循环体！</span>        <span class="hljs-keyword">break</span>;    &#125;    System.out.println(<span class="hljs-string">&quot;Count is: &quot;</span> + i);&#125;</code></pre></div><p>（3）跳转循环</p><div class="code-wrapper"><pre><code class="hljs java">label: <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; x &lt; <span class="hljs-number">5</span>; x++) &#123;    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>; y &gt; <span class="hljs-number">0</span>; y--) &#123;        <span class="hljs-keyword">if</span> (y == x) &#123;            <span class="hljs-keyword">break</span> label; <span class="hljs-comment">// 结束label指向的循环</span>        &#125;        System.out.printf(<span class="hljs-string">&quot;(x,y) = (%d,%d)&quot;</span>, x, y);        System.out.println();    &#125;&#125;System.out.println(<span class="hljs-string">&quot;Game Over!&quot;</span>);</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jdk</tag>
      
      <tag>javase</tag>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MyBatis-Plus详解</title>
    <link href="/2025/09/05/mybatisplus/"/>
    <url>/2025/09/05/mybatisplus/</url>
    
    <content type="html"><![CDATA[<h1 id="1-MyBatis-Plus-简介"><a href="#1-MyBatis-Plus-简介" class="headerlink" title="1. MyBatis-Plus 简介"></a>1. MyBatis-Plus 简介</h1><h2 id="1-1-前置知识："><a href="#1-1-前置知识：" class="headerlink" title="1.1 前置知识："></a>1.1 前置知识：</h2><ul><li>MySQL：8.0.42</li><li>IDEA</li><li>Maven</li><li>Spring Boot：3.5.5</li><li>MyBatisPlus：3.5.14</li></ul><h2 id="1-2-讲解内容"><a href="#1-2-讲解内容" class="headerlink" title="1.2 讲解内容"></a>1.2 讲解内容</h2><p>（1）基本功能：</p><ul><li>通用Mapper：BaseMapper.java</li><li>通用Service：IService.java</li><li>通用注解</li><li>条件构造器</li><li>通用枚举</li></ul><p>（2）插件：</p><ul><li>分页插件</li><li>乐观锁</li></ul><p>（3）MyBatisX插件的使用</p><p>（4）多数据源</p><p>（5）代码生成器</p><h2 id="1-3-基础知识"><a href="#1-3-基础知识" class="headerlink" title="1.3 基础知识"></a>1.3 基础知识</h2><p>官方文档</p><div class="code-wrapper"><pre><code class="hljs url">https://baomidou.com/introduce/</code></pre></div><h1 id="2-入门案例"><a href="#2-入门案例" class="headerlink" title="2. 入门案例"></a>2. 入门案例</h1><h2 id="2-1-数据库创建"><a href="#2-1-数据库创建" class="headerlink" title="2.1 数据库创建"></a>2.1 数据库创建</h2><p>（1）数据库创建</p><div class="code-wrapper"><pre><code class="hljs mysql">CREATE DATABASE IF NOT EXISTS `testmybatisplus` ;</code></pre></div><p>（2）数据表创建</p><div class="code-wrapper"><pre><code class="hljs mysql">USE `testmybatisplus` ;DROP TABLE IF EXISTS `user`;CREATE TABLE `user`(    id BIGINT NOT NULL COMMENT &#x27;主键ID&#x27;,    name VARCHAR(30) NULL DEFAULT NULL COMMENT &#x27;姓名&#x27;,    age INT NULL DEFAULT NULL COMMENT &#x27;年龄&#x27;,    email VARCHAR(50) NULL DEFAULT NULL COMMENT &#x27;邮箱&#x27;,    PRIMARY KEY (id));</code></pre></div><p>（3）数据</p><div class="code-wrapper"><pre><code class="hljs mysql">DELETE FROM `user`;INSERT INTO `user` (id, name, age, email) VALUES(1, &#x27;Jone&#x27;, 18, &#x27;test1@baomidou.com&#x27;),(2, &#x27;Jack&#x27;, 20, &#x27;test2@baomidou.com&#x27;),(3, &#x27;Tom&#x27;, 28, &#x27;test3@baomidou.com&#x27;),(4, &#x27;Sandy&#x27;, 21, &#x27;test4@baomidou.com&#x27;),(5, &#x27;Billie&#x27;, 24, &#x27;test5@baomidou.com&#x27;);</code></pre></div><h2 id="2-2-Spring-Boot-工程创建"><a href="#2-2-Spring-Boot-工程创建" class="headerlink" title="2.2 Spring Boot 工程创建"></a>2.2 Spring Boot 工程创建</h2><p>（1）创建工程</p><p>（2）Spring Web启动器</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><p>（3）Spring Test启动器</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><p>（4）MySQL 8依赖，选择8.2.0这个安全版本</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><p>（5）基于Spring Boot 3的MyBatis-Plus依赖</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-spring-boot3-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.14<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><h2 id="2-3-工程配置"><a href="#2-3-工程配置" class="headerlink" title="2.3 工程配置"></a>2.3 工程配置</h2><p>（1）<code>application.properties</code></p><div class="code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">spring.application.name</span>=<span class="hljs-string">mybatisplus</span><span class="hljs-attr">spring.datasource.type</span>=<span class="hljs-string">com.zaxxer.hikari.HikariDataSource</span><span class="hljs-attr">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/testmybatisplus?characterEncoding=utf-8&amp;userSSL=false</span><span class="hljs-attr">spring.datasource.username</span>=<span class="hljs-string">root</span><span class="hljs-attr">spring.datasource.password</span>=<span class="hljs-string">xyc123456</span></code></pre></div><p>（2）创建实体类</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@NoArgsConstructor</span><span class="hljs-meta">@AllArgsConstructor</span><span class="hljs-meta">@Setter</span><span class="hljs-meta">@Getter</span><span class="hljs-meta">@ToString</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;    <span class="hljs-keyword">private</span> Long id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> Integer age;    <span class="hljs-keyword">private</span> String email;&#125;</code></pre></div><p>（3）创建mapper接口</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;<span class="hljs-keyword">import</span> com.xyc.mybatisplus.pojo.User;<span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;User&gt; &#123;&#125;</code></pre></div><blockquote><p>创建一个接口，继承于<code>BaseMapper&lt;User&gt;</code>，传入需要操作的实体类。</p><p>默认情况下，实体类与数据库的表名要一致，字段名也要一致。</p></blockquote><p>（4）扫描Mapper所在包，注册Mapper组件</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><span class="hljs-comment">// 扫描Mapper接口</span><span class="hljs-meta">@MapperScan(&quot;com.xyc.mybatisplus.mapper&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisplusApplication</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        SpringApplication.run(MybatisplusApplication.class, args);    &#125;&#125;</code></pre></div><p>（5）编写Controller</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.List;<span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> UserMapper userMapper;    <span class="hljs-meta">@RequestMapping(&quot;/users&quot;)</span>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">getUsers</span><span class="hljs-params">()</span> &#123;        List&lt;User&gt; users = userMapper.selectList(<span class="hljs-literal">null</span>);        <span class="hljs-keyword">return</span> users;    &#125;&#125;</code></pre></div><p>（6）浏览器访问</p><p><img src="/2025/09/05/mybatisplus/%E8%8E%B7%E5%8F%96%E6%89%80%E6%9C%89User.png" alt="获取所有User"></p><h2 id="2-4-配置日志"><a href="#2-4-配置日志" class="headerlink" title="2.4 配置日志"></a>2.4 配置日志</h2><p>（1）<code>application.properties</code></p><div class="code-wrapper"><pre><code class="hljs properties"><span class="hljs-comment"># 配置MyBatis-Plus日志</span><span class="hljs-attr">mybatis-plus.configuration.log-impl</span>=<span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span></code></pre></div><p>（2）日志输出：</p><p><img src="/2025/09/05/mybatisplus/%E6%97%A5%E5%BF%97%E8%BE%93%E5%87%BASQL%E8%AF%AD%E5%8F%A5.png" alt="日志输出SQL语句"></p><h1 id="3-BaseMapper"><a href="#3-BaseMapper" class="headerlink" title="3. BaseMapper"></a>3. BaseMapper</h1><p>（1）用法：</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;<span class="hljs-keyword">import</span> com.xyc.mybatisplus.pojo.User;<span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;User&gt; &#123;&#125;</code></pre></div><p>（2）核心接口：</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BaseMapper</span>&lt;T&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Mapper</span>&lt;T&gt; &#123; &#125;</code></pre></div><h2 id="3-1-新增"><a href="#3-1-新增" class="headerlink" title="3.1 新增"></a>3.1 新增</h2><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(T entity)</span>;</code></pre></div><h2 id="3-2-删除"><a href="#3-2-删除" class="headerlink" title="3.2 删除"></a>3.2 删除</h2><p>（1）默认删除</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">default</span> <span class="hljs-type">int</span> <span class="hljs-title function_">deleteById</span><span class="hljs-params">(Serializable id)</span> &#123;    <span class="hljs-keyword">return</span> deleteById(id, <span class="hljs-literal">true</span>);&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> userMapper.deleteById(<span class="hljs-number">1963985569552105474L</span>); <span class="hljs-comment">// i=1</span></code></pre></div><ul><li>0：删除失败（没有该id）</li><li>1：删除成功，影响1条数据</li><li>id为Long类型，以L结尾。</li></ul><p>（2）按实体对象删除</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-title function_">deleteById</span><span class="hljs-params">(T entity)</span>;</code></pre></div><h2 id="3-3-修改"><a href="#3-3-修改" class="headerlink" title="3.3 修改"></a>3.3 修改</h2><p>（1）默认修改</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">default</span> <span class="hljs-type">int</span> <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; updateWrapper)</span> &#123;    <span class="hljs-keyword">return</span> update(<span class="hljs-literal">null</span>, updateWrapper);&#125;</code></pre></div><p>（2）根据ID修改</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-title function_">updateById</span><span class="hljs-params">(<span class="hljs-meta">@Param(Constants.ENTITY)</span> T entity)</span>;</code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">6L</span>,<span class="hljs-string">&quot;xyc&quot;</span>,<span class="hljs-number">28</span>,<span class="hljs-string">&quot;xyc@qq.com&quot;</span>);userMapper.updateById(user);</code></pre></div><h2 id="3-4-查询"><a href="#3-4-查询" class="headerlink" title="3.4 查询"></a>3.4 查询</h2><p>（1）根据ID查询</p><div class="code-wrapper"><pre><code class="hljs java">T <span class="hljs-title function_">selectById</span><span class="hljs-params">(Serializable id)</span>;</code></pre></div><p>（2）根据多个ID查询</p><div class="code-wrapper"><pre><code class="hljs java">List&lt;Long&gt; list = Arrays.asList(<span class="hljs-number">1L</span>, <span class="hljs-number">2L</span>, <span class="hljs-number">3L</span>);List&lt;User&gt; users = userMapper.selectByIds(list);users.forEach(System.out::println);</code></pre></div><p>（3）查询所有数据</p><div class="code-wrapper"><pre><code class="hljs java">List&lt;T&gt; <span class="hljs-title function_">selectList</span><span class="hljs-params">(<span class="hljs-meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span>;</code></pre></div><div class="code-wrapper"><pre><code class="hljs java">List&lt;User&gt; users = userMapper.selectList(<span class="hljs-literal">null</span>);</code></pre></div><h2 id="3-5-自定义功能"><a href="#3-5-自定义功能" class="headerlink" title="3.5 自定义功能"></a>3.5 自定义功能</h2><p>（1）创建Mapper接口，自定义功能</p><p>（2）创建Mapper的映射文件，实现自定义功能</p><p>（3）默认映射文件存放位置，不需要修改</p><div class="code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">mybatis-plus.mapper-locations</span>=<span class="hljs-string">classpath*:/mapper/**/*.xml</span></code></pre></div><p>（4）自定义位置，<code>application.properties</code>添加如下配置</p><div class="code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">mybatis-plus.mapper-locations</span>=<span class="hljs-string">classpath*:/mymapper/*.xml</span></code></pre></div><h1 id="4-IService"><a href="#4-IService" class="headerlink" title="4. IService"></a>4. IService</h1><p>（1）文档：</p><div class="code-wrapper"><pre><code class="hljs url">https://baomidou.com/guides/data-interface/</code></pre></div><p>（2）IService 是 MyBatis-Plus 提供的一个通用 Service 层接口，它封装了常见的 CRUD 操作，包括插入、删除、查询和分页等。通过继承 IService 接口，可以快速实现对数据库的基本操作，同时保持代码的简洁性和可维护性。</p><p>（3）IService 接口中的方法命名遵循了一定的规范，如 get 用于查询单行，remove 用于删除，list 用于查询集合，page 用于分页查询，这样可以避免与 Mapper 层的方法混淆。</p><p>（4）接口：</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IService</span>&lt;T&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IRepository</span>&lt;T&gt; &#123;&#125;</code></pre></div><p>（5）实现类</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServiceImpl</span>&lt;M <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;T&gt;, T&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">CrudRepository</span>&lt;M, T&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IService</span>&lt;T&gt; &#123;&#125;</code></pre></div><h2 id="4-1-通用Service的使用"><a href="#4-1-通用Service的使用" class="headerlink" title="4.1 通用Service的使用"></a>4.1 通用Service的使用</h2><p>（1）定义自己的Service接口，继承于IService，泛型就是要操作的实体类</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IService</span>&lt;User&gt; &#123;&#125;</code></pre></div><p>（2）实现接口</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;&#125;</code></pre></div><ul><li>不需要自己实现 IService 中所有的方法，只需要继承于 ServiceImpl。</li><li>ServiceImpl 的参数：&lt;实体类Mapper，实体类&gt;。</li></ul><p>（3）这样做的原因：既可以使用通用Service的功能，也可以使用自定义的功能。</p><img src="/2025/09/05/mybatisplus/MVC分层模型.svg" alt="MVC分层模型" style="zoom:120%;"><h1 id="5-常用注解"><a href="#5-常用注解" class="headerlink" title="5. 常用注解"></a>5. 常用注解</h1><h2 id="5-1-TableName"><a href="#5-1-TableName" class="headerlink" title="5.1 @TableName"></a>5.1 @TableName</h2><p>（1）作用：用于实体类上，实现实体类与所表名对应。</p><ul><li>实体类</li></ul><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@TableName(&quot;t_user&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;&#125;</code></pre></div><ul><li>实体类对应的表</li></ul><div class="code-wrapper"><pre><code class="hljs SQL"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `t_user`;</code></pre></div><p>（2）数据库的所有表都有一个统一的前缀（比如 <code>t_</code>），可以在 MyBatis-Plus 的全局配置中设置。</p><h2 id="5-2-TableId"><a href="#5-2-TableId" class="headerlink" title="5.2 @TableId"></a>5.2 @TableId</h2><p>（1）作用：将字段设置为表的主键</p><p>（2）默认使用ID字段作为主键。</p><p>（3）value属性：设置所对应表的主键字段名</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@TableId(value = &quot;id&quot;)</span> <span class="hljs-comment">// 将 uid 设置为主键，对应数据表中的 id 字段</span><span class="hljs-keyword">private</span> Long uid;</code></pre></div><p>（4）type属性：用于指定主键的生成策略，Enum类型：<code>IdType</code></p><ul><li><code>IdType.AUTO</code>：数据库ID自增。<strong>数据库表的主键字段必须设置为自增</strong>。</li><li><code>IdType.NONE</code>：无状态，该类型为未设置主键类型。跟随全局配置，是默认选项。</li><li><code>IdType.INPUT</code>：用户通过代码手动输入主键值。</li><li><code>IdType.ASSIGN_ID</code>：分配一个长整型（Long）的ID（默认策略）。使用雪花算法生成ID，可处理数值型(Long)和字符串型(String)主键。</li><li><code>IdType.ASSIGN_UUID</code>：分配一个UUID字符串作为主键。主键类型必须是String。</li></ul><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@TableId(value = &quot;id&quot;, type = IdType.AUTO)</span><span class="hljs-keyword">private</span> Long uid;</code></pre></div><h2 id="5-3-TableField"><a href="#5-3-TableField" class="headerlink" title="5.3 @TableField"></a>5.3 @TableField</h2><p>（1）<code>@TableField</code> 专用于<strong>标注实体类中的普通字段（非主键字段）</strong>。它的主要作用是：</p><ul><li><p><strong>映射字段名</strong>：当实体类的字段名与数据库表的列名不一致时，建立映射关系。</p></li><li><p><strong>定义字段行为</strong>：声明字段在 MyBatis-Plus 中的特殊行为，例如是否参与 SQL 操作、是否自动填充等。</p></li></ul><p>（2）常用属性</p><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">作用</th><th align="left">常用场景</th></tr></thead><tbody><tr><td align="left"><strong><code>value</code></strong></td><td align="left"><code>String</code></td><td align="left"><strong>指定数据库列名</strong></td><td align="left">字段名与列名不符合默认命名规则时</td></tr><tr><td align="left"><strong><code>exist</code></strong></td><td align="left"><code>boolean</code></td><td align="left"><strong>标记是否为数据库字段</strong></td><td align="left">实体类中的辅助字段，数据库无对应列时</td></tr><tr><td align="left"><strong><code>fill</code></strong></td><td align="left"><code>FieldFill</code></td><td align="left"><strong>指定字段的自动填充策略</strong></td><td align="left">自动化设置创建时间、更新时间、操作人ID等</td></tr><tr><td align="left"><strong><code>select</code></strong></td><td align="left"><code>boolean</code></td><td align="left"><strong>控制字段是否默认被查询</strong></td><td align="left">隐藏敏感字段（如密码）或大字段以提升查询性能</td></tr></tbody></table><h2 id="5-4-TableLogic"><a href="#5-4-TableLogic" class="headerlink" title="5.4 @TableLogic"></a>5.4 @TableLogic</h2><p>（1）基本用法：实体类的逻辑删除字段上添加 <code>@TableLogic</code> 注解</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@NoArgsConstructor</span><span class="hljs-meta">@AllArgsConstructor</span><span class="hljs-meta">@Setter</span><span class="hljs-meta">@Getter</span><span class="hljs-meta">@ToString</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;    <span class="hljs-keyword">private</span> Long id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> Integer age;    <span class="hljs-keyword">private</span> String email;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * <span class="hljs-doctag">@TableLogic</span> 用于表示逻辑删除</span><span class="hljs-comment">     * deleted = 0 代表未删除</span><span class="hljs-comment">     * deleted = 1 代表已删除</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@TableField(value = &quot;is_deleted&quot;)</span>    <span class="hljs-meta">@TableLogic</span>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> deleted;&#125;</code></pre></div><p>（2）自定义属性：默认情况下，MyBatis-Plus 使用 <code>1</code> 表示已删除，<code>0</code> 表示未删除。也可以自定义：</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@TableField(value = &quot;is_deleted&quot;)</span><span class="hljs-meta">@TableLogic(value = &quot;NO&quot;, delval = &quot;YES&quot;)</span><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> deleted;</code></pre></div><p>（3）删除原理：当调用默认的 <code>deleteById()</code> 或类似方法时，MyBatis-Plus 不会真正删除数据，而是执行 UPDATE 操作。</p><div class="code-wrapper"><pre><code class="hljs java">userMapper.deleteById(<span class="hljs-number">1L</span>); <span class="hljs-comment">// BaseMapper提供的方法</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span> 实际执行的<span class="hljs-keyword">SQL</span><span class="hljs-keyword">UPDATE</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">SET</span> is_deleted <span class="hljs-operator">=</span> <span class="hljs-number">1</span> <span class="hljs-keyword">WHERE</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span> <span class="hljs-keyword">AND</span> is_deleted <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;</code></pre></div><p>（4）查询原理：MyBatis-Plus 会自动添加未删除的条件</p><div class="code-wrapper"><pre><code class="hljs java">List&lt;User&gt; users = userMapper.selectList(<span class="hljs-literal">null</span>);</code></pre></div><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span> 实际执行的<span class="hljs-keyword">SQL</span><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">WHERE</span> is_deleted <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;</code></pre></div><blockquote><p>特别注意，如果自定义SQL的话，也要按这种方式进行删除（更新）&#x2F;查询。</p></blockquote><h1 id="6-常用配置"><a href="#6-常用配置" class="headerlink" title="6. 常用配置"></a>6. 常用配置</h1><h2 id="6-1-配置表名前缀"><a href="#6-1-配置表名前缀" class="headerlink" title="6.1 配置表名前缀"></a>6.1 配置表名前缀</h2><p><code>application.properties</code></p><div class="code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">mybatis-plus.global-config.db-config.table-prefix</span>=<span class="hljs-string">t_</span></code></pre></div><ul><li><p>功能：配置实体类的统一前缀</p></li><li><p>结果：实体类：User → 表：t_user</p></li><li><p>功能：与 <code>@TableName</code> 一致</p></li></ul><h2 id="6-2-设置统一的主键生成策略"><a href="#6-2-设置统一的主键生成策略" class="headerlink" title="6.2 设置统一的主键生成策略"></a>6.2 设置统一的主键生成策略</h2><p><code>application.properties</code></p><div class="code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">mybatis-plus.global-config.db-config.id-type</span>=<span class="hljs-string">auto</span></code></pre></div><ul><li><p>功能：配置实体类的主键生成策略</p></li><li><p>功能：与 <code>@TableId</code> 的 <code>type</code> 属性一致，值也是枚举类型</p></li></ul><h2 id="6-3-配置全局逻辑删除"><a href="#6-3-配置全局逻辑删除" class="headerlink" title="6.3 配置全局逻辑删除"></a>6.3 配置全局逻辑删除</h2><p><code>application.yml</code></p><div class="code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">mybatis-plus:</span>  <span class="hljs-attr">global-config:</span>    <span class="hljs-attr">db-config:</span>      <span class="hljs-attr">logic-delete-field:</span> <span class="hljs-string">deleted</span>  <span class="hljs-comment"># 全局逻辑删除的实体字段名</span>      <span class="hljs-attr">logic-delete-value:</span> <span class="hljs-number">1</span>        <span class="hljs-comment"># 逻辑已删除值（默认为 1）</span>      <span class="hljs-attr">logic-not-delete-value:</span> <span class="hljs-number">0</span>    <span class="hljs-comment"># 逻辑未删除值（默认为 0）</span></code></pre></div><h2 id="6-4-配置日志"><a href="#6-4-配置日志" class="headerlink" title="6.4 配置日志"></a>6.4 配置日志</h2><p><code>application.properties</code></p><div class="code-wrapper"><pre><code class="hljs properties"><span class="hljs-comment"># 配置MyBatis-Plus日志</span><span class="hljs-attr">mybatis-plus.configuration.log-impl</span>=<span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span></code></pre></div><h1 id="7-条件构造器"><a href="#7-条件构造器" class="headerlink" title="7. 条件构造器"></a>7. 条件构造器</h1><div class="code-wrapper"><pre><code class="hljs text">Wrapper                                 # 条件构造抽象类，最顶端父类|---- AbstractWrapper                   # 用于查询条件封装，生成SQL的where条件    |---- QueryWrapper                  # 查询的条件封装    |---- UpdateWrapper                 # Update的条件封装    |---- AbstractLambdaWrapper         # 使用Lambda语法        |---- LambdaQueryWrapper        # Lambda语法使用查询的条件封装        |---- LambdaUpdateWrapper       # Lambda语法使用更新的条件封装</code></pre></div><h2 id="7-1-QueryWrapper：组装查询条件"><a href="#7-1-QueryWrapper：组装查询条件" class="headerlink" title="7.1 QueryWrapper：组装查询条件"></a>7.1 QueryWrapper：组装查询条件</h2><p>（1）基本使用：组装查询条件</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><span class="hljs-keyword">private</span> UserService userService;<span class="hljs-meta">@Test</span><span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span><span class="hljs-params">()</span> &#123;    <span class="hljs-comment">// 查询用户名包含字母a，年龄在20-30岁之间，并且邮箱不为空</span>    QueryWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;(); <span class="hljs-comment">// 查询构造器，泛型为查询实体</span>    wrapper.like(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>)            .between(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>)            .isNotNull(<span class="hljs-string">&quot;email&quot;</span>); <span class="hljs-comment">// 链式写法，字段为数据库中的字段，用于生成SQL语句的where条件</span>    List&lt;User&gt; users = userService.list(wrapper);    users.forEach(System.out::println);&#125;</code></pre></div><p>（2）日志中的SQL语句日志</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> id,name,age,email,is_deleted <span class="hljs-keyword">AS</span> deleted <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">WHERE</span> is_deleted<span class="hljs-operator">=</span><span class="hljs-number">0</span> <span class="hljs-keyword">AND</span> (name <span class="hljs-keyword">LIKE</span> ? <span class="hljs-keyword">AND</span> age <span class="hljs-keyword">BETWEEN</span> ? <span class="hljs-keyword">AND</span> ? <span class="hljs-keyword">AND</span> email <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT NULL</span>)</code></pre></div><h2 id="7-2-QueryWrapper：组装排序条件"><a href="#7-2-QueryWrapper：组装排序条件" class="headerlink" title="7.2 QueryWrapper：组装排序条件"></a>7.2 QueryWrapper：组装排序条件</h2><p>（1）基本使用：组装排序条件</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><span class="hljs-keyword">private</span> UserService userService;<span class="hljs-meta">@Test</span><span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads3</span><span class="hljs-params">()</span> &#123;    <span class="hljs-comment">// 查询用户信息，按年龄进行降序排序，年龄相同再按id进行生序排序</span>    QueryWrapper&lt;User&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;(); <span class="hljs-comment">// 查询构造器，泛型为查询实体</span>    wrapper.orderByDesc(<span class="hljs-string">&quot;age&quot;</span>).            orderByAsc(<span class="hljs-string">&quot;id&quot;</span>);    List&lt;User&gt; users = userService.list(wrapper);    users.forEach(System.out::println);&#125;</code></pre></div><p>（2）日志中的SQL语句日志</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> id,name,age,email,is_deleted <span class="hljs-keyword">AS</span> deleted <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">WHERE</span> is_deleted<span class="hljs-operator">=</span><span class="hljs-number">0</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> age <span class="hljs-keyword">DESC</span>,id <span class="hljs-keyword">ASC</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Java框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MyBatis</tag>
      
      <tag>MyBatis-Plus</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac mini M4的安装操作记录</title>
    <link href="/2025/08/29/mac/"/>
    <url>/2025/08/29/mac/</url>
    
    <content type="html"><![CDATA[<h1 id="1-软件安装"><a href="#1-软件安装" class="headerlink" title="1. 软件安装"></a>1. 软件安装</h1><h1 id="2-其他操作"><a href="#2-其他操作" class="headerlink" title="2. 其他操作"></a>2. 其他操作</h1><h2 id="2-1-可以不用管的操作"><a href="#2-1-可以不用管的操作" class="headerlink" title="2.1 可以不用管的操作"></a>2.1 可以不用管的操作</h2><p>（1）文件夹的符号链接：直接替换整个 <code>_posts</code> 目录为符号链接</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">ln</span> -s /Users/xycmacmini/Documents/markdown /Users/xycmacmini/Documents/myblog/source/_posts</code></pre></div><blockquote><p>（1）此操作类似于Windows的快捷方式</p><p>（2）结果：会将 <code>_posts</code> 目录直接指向 <code>markdown</code> 目录，所有在 <code>markdown</code> 中的文件都会在 <code>_posts</code> 中实时可见。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Mac操作</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mac</tag>
      
      <tag>软件安装</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Hexo搭建博客</title>
    <link href="/2025/08/27/hexo/"/>
    <url>/2025/08/27/hexo/</url>
    
    <content type="html"><![CDATA[<!-- more --><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">tags:</span>     <span class="hljs-bullet">-</span> <span class="hljs-string">Hexo</span>    <span class="hljs-bullet">-</span> <span class="hljs-string">Fluid</span>    <span class="hljs-bullet">-</span> <span class="hljs-string">博客</span><span class="hljs-attr">categories:</span>     <span class="hljs-bullet">-</span> <span class="hljs-string">博客搭建</span><span class="hljs-attr">date:</span> <span class="hljs-number">2025</span><span class="hljs-string">/8/27</span> <span class="hljs-number">10</span><span class="hljs-string">:00:00</span><span class="hljs-attr">excerpt:</span> <span class="hljs-string">这是摘要</span><span class="hljs-comment"># 该文章归档写法目前不能出现在文章信息中，暂时不清楚原因</span><span class="hljs-attr">archive:</span> <span class="hljs-literal">true</span></code></pre></div><p>官方文档：</p><div class="code-wrapper"><pre><code class="hljs url">https://hexo.io/zh-cn/docs/</code></pre></div><h1 id="1-需要使用的技术"><a href="#1-需要使用的技术" class="headerlink" title="1. 需要使用的技术"></a>1. 需要使用的技术</h1><h2 id="1-1-Git"><a href="#1-1-Git" class="headerlink" title="1.1 Git"></a>1.1 Git</h2><p>简单来说就是一个分布式的版本控制系统，它可以帮你记录每一次文件的改动，并且可以让同事协同编辑。我们可以方便快捷的查看历史版本。</p><h2 id="1-2-Github"><a href="#1-2-Github" class="headerlink" title="1.2 Github"></a>1.2 Github</h2><p>Github是软件项目的托管平台。</p><h2 id="1-2-Hexo"><a href="#1-2-Hexo" class="headerlink" title="1.2 Hexo"></a>1.2 Hexo</h2><p>它是基于node.js的静态博客网站生成器，作者是来自台湾的Tommy Chen，它可以简单快速的帮我们生成博客页面，并快捷的部署到Gitee或Github上。</p><h1 id="2-环境搭建"><a href="#2-环境搭建" class="headerlink" title="2. 环境搭建"></a>2. 环境搭建</h1><blockquote><p>注意：电脑系统是Mac，M4芯片，本文都是基于该系统。</p></blockquote><h2 id="2-1-检测电脑上是否有相应的环境"><a href="#2-1-检测电脑上是否有相应的环境" class="headerlink" title="2.1 检测电脑上是否有相应的环境"></a>2.1 检测电脑上是否有相应的环境</h2><p>（1）检查Git、node、npm</p><div class="code-wrapper"><pre><code class="hljs bash">git --versionnode -vnpm -vhexo -v</code></pre></div><p>（2）查看安装目录</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">which</span> git<span class="hljs-built_in">which</span> node<span class="hljs-built_in">which</span> npm<span class="hljs-built_in">which</span> hexo</code></pre></div><h2 id="2-2-环境下载地址"><a href="#2-2-环境下载地址" class="headerlink" title="2.2 环境下载地址"></a>2.2 环境下载地址</h2><p>（1）Git下载地址：</p><div class="code-wrapper"><pre><code class="hljs url">https://git-scm.com/download/</code></pre></div><p>（2）node.js与npm下载地址：</p><div class="code-wrapper"><pre><code class="hljs url">http://nodejs.cn/download/</code></pre></div><h2 id="2-3-Hexo的安装"><a href="#2-3-Hexo的安装" class="headerlink" title="2.3 Hexo的安装"></a>2.3 Hexo的安装</h2><p>（1）使用npm命令安装Hexo的默认地址为：</p><div class="code-wrapper"><pre><code class="hljs url">/usr/local/lib/node_modules</code></pre></div><ul><li>该地址的安全机制默认是<strong>没有写入权限</strong>的。</li></ul><p>（2）获取系统目录的所有权，在终端中运行以下命令，将 <code>/usr/local</code> 目录及其所有子目录的所有权更改给当前用户：</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chown</span> -R $(<span class="hljs-built_in">whoami</span>) /usr/local</code></pre></div><ul><li><code>sudo</code>: 以超级管理员身份执行。</li><li><code>chown -R</code>: 递归地更改文件所有权。</li><li><code>$(whoami)</code>: 自动获取当前的用户名。</li></ul><p>（3）安装Hexo：</p><div class="code-wrapper"><pre><code class="hljs bash">npm install -g hexo-cli</code></pre></div><ul><li><code>-g</code>：全局（global） 的标志。这意味着不是把包安装到当前目录下的 <code>node_modules </code>文件夹里，而是安装到系统的一个全局位置。这样安装的命令行工具可以在电脑的任何地方通过终端直接运行。</li></ul><p>（4）检查安装</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 检查版本</span>hexo -v<span class="hljs-comment"># 安装目录</span><span class="hljs-built_in">which</span> hexo</code></pre></div><h1 id="3-博客搭建"><a href="#3-博客搭建" class="headerlink" title="3. 博客搭建"></a>3. 博客搭建</h1><h2 id="3-1-初始化配置"><a href="#3-1-初始化配置" class="headerlink" title="3.1 初始化配置"></a>3.1 初始化配置</h2><p>（1）解决通过 HTTP&#x2F;HTTPS 协议克隆或推送大型 Git 仓库时可能出现的网络超时或失败问题：</p><div class="code-wrapper"><pre><code class="hljs bash">git config --global http.postBuffer 524288000</code></pre></div><ul><li><code>git config</code>：Git 的配置命令，用于获取或设置 Git 的配置项。</li><li><code>--global</code>：作用域选项。表示这个配置是针对当前系统用户全局的，而不是针对某个特定的 Git 仓库。设置后会应用到该用户所有的 Git 操作上。</li><li><code>http.postBuffer</code>：要设置的配置项名称。这是这个命令的核心。</li><li><code>524288000</code>：给 http.postBuffer 配置项设置的值。单位是字节（<code>524288000B = 500M</code>）。</li></ul><h2 id="3-2-初始化博客"><a href="#3-2-初始化博客" class="headerlink" title="3.2 初始化博客"></a>3.2 初始化博客</h2><p>（1）初始化博客：</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 将当前文件夹初始化为博客文件夹</span>hexo init<span class="hljs-comment"># 在当前目录下创建一个文件夹名为myblog，并将该文件夹初始化为博客文件夹</span>hexo init myblog</code></pre></div><p>（2）安装依赖：</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 进入博客文件夹</span><span class="hljs-built_in">cd</span> myblog<span class="hljs-comment"># 安装依赖</span>npm install</code></pre></div><p>（3）本地预览：</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 启动服务，浏览器访问 http://localhost:4000 查看本地博客</span>hexo server</code></pre></div><h2 id="3-3-获取SSH"><a href="#3-3-获取SSH" class="headerlink" title="3.3 获取SSH"></a>3.3 获取SSH</h2><p>（1）Github 准备：在 Github 上创建一个<strong>公开仓库</strong>，仓库名格式推荐为 <code>用户名.github.io</code>（这样后期访问路径会更简洁，也不需要过多的额外配置）。</p><p>（2）本地配置 git 的登录用户，需要在 <code>myblog</code> 文件夹下</p><ul><li>登录邮箱：github 上的登录邮箱</li></ul><div class="code-wrapper"><pre><code class="hljs bash">git config --global user.email <span class="hljs-string">&quot;github登录邮箱&quot;</span>git config --global user.email <span class="hljs-string">&quot;123456789@qq.com&quot;</span></code></pre></div><ul><li>登录用户名：github 上的用户名</li></ul><div class="code-wrapper"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;xxx&quot;</span></code></pre></div><p>（3）生成 SSH 密钥对，它是安全连接到 GitHub（或其他 Git 服务器）的基石。</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 执行此命令后，会等待输入，不用管，直接回车，直到该命令执行结束</span>ssh-keygen -t rsa -C <span class="hljs-string">&quot;github登录邮箱&quot;</span></code></pre></div><blockquote><p>等待输入内容说明：</p><p><strong><code>Enter file in which to save the key (/Users/you/.ssh/id_rsa):</code></strong></p><ul><li><strong>意思</strong>：询问你把生成的密钥文件保存在哪里。</li><li><strong>操作</strong>：<strong>直接按回车</strong>接受默认位置（<code>/Users/你的用户名/.ssh/id_rsa</code>）即可。这是 SSH 客户端默认会去寻找密钥的地方。</li></ul><p><strong><code>Enter passphrase (empty for no passphrase):</code></strong></p><ul><li><strong>意思</strong>：询问你是否为私钥设置一个“密码短语”。这是一个额外的安全层。以后每次使用这个密钥时，都需要输入这个密码来解锁它。</li><li><strong>操作</strong>：<ul><li><strong>为了更安全</strong>：输入一个复杂的密码并牢记它。</li><li><strong>为了方便（推荐用于个人电脑）</strong>：<strong>直接按回车</strong>留空，这样使用密钥时就不需要再输入密码。</li></ul></li></ul><p>之后，命令就会生成密钥对，你会看到艺术图案和提示。</p></blockquote><p>（4）密钥对：上诉这个命令会生成两个文件，它们总是成对出现：</p><ul><li><code>id_rsa</code> ：私钥 (Private Key)，绝不能给别人！ 就保存在电脑的 <code>~/.ssh/</code> 目录下，好好保管。</li><li><code>id_rsa.pub</code>：公钥 (Public Key)，可以放心地交给任何人。要把它上传到 GitHub、GitLab 等服务器。</li></ul><h2 id="3-4-上传-SSH-到-GitHub"><a href="#3-4-上传-SSH-到-GitHub" class="headerlink" title="3.4 上传 SSH 到 GitHub"></a>3.4 上传 SSH 到 GitHub</h2><p>（1）登录Github</p><p>（2）打开SSH</p><div class="code-wrapper"><pre><code class="hljs bash">点击github头像 -&gt; Settings -&gt; SSH and GPG keys -&gt; New SSH key</code></pre></div><p>（3）将<code>id_rsa.pub</code>里面的内容全部复制到 <code>key</code> 文本框中</p><p>（4）在终端测试ssh是否配置成功</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 输入后，按提示输入yes，执行后看到用户名表示成功，-T表示这次连接不是为了登录，只是测试能否连接和认证</span>ssh -T git@github.com</code></pre></div><h2 id="3-5-配置博客项目上传路径"><a href="#3-5-配置博客项目上传路径" class="headerlink" title="3.5 配置博客项目上传路径"></a>3.5 配置博客项目上传路径</h2><p>（1）在 GitHub 上的博客仓库中获取 <code>SSH</code> 连接路径</p><p><img src="/2025/08/27/hexo/SSH%E8%B7%AF%E5%BE%84.png" alt="SSH路径"></p><p>（2）在myblog博客项目配置文件 <code>_config.yml</code> 中添加SSH地址</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment"># Deployment</span><span class="hljs-comment">## Docs: https://hexo.io/docs/one-command-deployment</span><span class="hljs-attr">deploy:</span>  <span class="hljs-attr">type:</span> <span class="hljs-string">&#x27;git&#x27;</span>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:Xie-YingCheng/Xie-YingCheng.github.io.git</span>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span></code></pre></div><blockquote><p><code>type: &#39;git&#39;</code> 是 hexo 3.0 之后的写法，hexo 3.0 之前的写法是：<code>type: &#39;github&#39;</code> 。</p><p><code>branch: master</code> 分支是 master，在 GitHub 的仓库 → Settings → Pages → Branch 也要改为 master。</p></blockquote><p><img src="/2025/08/27/hexo/%E4%BF%AE%E6%94%B9Github%E5%8D%9A%E5%AE%A2%E4%BB%93%E5%BA%93%E7%9A%84Pages%E7%9A%84%E5%88%86%E6%94%AF.png" alt="修改Github博客仓库的Pages的分支"></p><h2 id="3-6-上传博客"><a href="#3-6-上传博客" class="headerlink" title="3.6 上传博客"></a>3.6 上传博客</h2><p>（1）安装Hexo的上传部署插件</p><div class="code-wrapper"><pre><code class="hljs bash">npm install --save hexo-deployer-git</code></pre></div><p>（2）上传博客</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 清除之前生成的一些静态资源，注意是claen，不是clear</span>hexo clean<span class="hljs-comment"># 重新生成</span>hexo g<span class="hljs-comment"># 上传、部署博客</span>hexo d<span class="hljs-comment"># 综合写法</span>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></pre></div><h1 id="4-博客页面美化"><a href="#4-博客页面美化" class="headerlink" title="4. 博客页面美化"></a>4. 博客页面美化</h1><p>下载使用Fuild主题：（下载压缩包）</p><div class="code-wrapper"><pre><code class="hljs url">https://github.com/fluid-dev/hexo-theme-fluid</code></pre></div><p>官方文档：</p><div class="code-wrapper"><pre><code class="hljs url">https://hexo.fluid-dev.com/docs/</code></pre></div><h2 id="文章摘要的两种写法"><a href="#文章摘要的两种写法" class="headerlink" title="文章摘要的两种写法"></a>文章摘要的两种写法</h2><p>（1）文章头部信息中</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">excerpt:</span> <span class="hljs-string">这是摘要</span></code></pre></div><p>（2）在文章<code>&lt;!-- more -→</code>之前的内容</p><div class="code-wrapper"><pre><code class="hljs markdown">---<span class="hljs-section">文章信息的yaml写法</span><span class="hljs-section">---</span>此处的信息也会在摘要中显示，文章头部信息的yaml中配置的excerpt优先。&lt;!-- more --&gt;文章内容</code></pre></div><h2 id="文章图片处理"><a href="#文章图片处理" class="headerlink" title="文章图片处理"></a>文章图片处理</h2><p>（1）建议md文章的结构：</p><div class="code-wrapper"><pre><code class="hljs nix">~<span class="hljs-operator">/</span>MyHexoBlog<span class="hljs-operator">/</span>source<span class="hljs-operator">/</span>_posts<span class="hljs-symbol">/</span>├── test.md├── test<span class="hljs-symbol">/</span>          <span class="hljs-comment"># 存放test.md的图片</span>├── github.md└── github<span class="hljs-symbol">/</span>        <span class="hljs-comment"># 存放github.md的图片</span></code></pre></div><p>（2）安装插件：</p><div class="code-wrapper"><pre><code class="hljs bash">npm install https://github.com/CodeFalling/hexo-asset-image --save</code></pre></div><p>（3）<code>_config.yml</code> 修改配置</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span></code></pre></div><p>（4）更新上传博客</p><div class="code-wrapper"><pre><code class="hljs bash">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>博客搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
